//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Timesheet.TimesheetService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Project", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class Project : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ApprovingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Approving2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Approving2NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApprovingNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BackupProceduresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanAddSubprojectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanAddTasksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportantNotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSubprojectRequiredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.Person[] ManagersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ManagersNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.Person[] ObserversField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ObserversNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ParentProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParentProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectAccountIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectAccountNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectCommunicationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ReferenceDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RepositoriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceCodeOwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusToSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusToSetNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TechnologyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Approving {
            get {
                return this.ApprovingField;
            }
            set {
                if ((this.ApprovingField.Equals(value) != true)) {
                    this.ApprovingField = value;
                    this.RaisePropertyChanged("Approving");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Approving2 {
            get {
                return this.Approving2Field;
            }
            set {
                if ((this.Approving2Field.Equals(value) != true)) {
                    this.Approving2Field = value;
                    this.RaisePropertyChanged("Approving2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Approving2Name {
            get {
                return this.Approving2NameField;
            }
            set {
                if ((object.ReferenceEquals(this.Approving2NameField, value) != true)) {
                    this.Approving2NameField = value;
                    this.RaisePropertyChanged("Approving2Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApprovingName {
            get {
                return this.ApprovingNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ApprovingNameField, value) != true)) {
                    this.ApprovingNameField = value;
                    this.RaisePropertyChanged("ApprovingName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BackupProcedures {
            get {
                return this.BackupProceduresField;
            }
            set {
                if ((object.ReferenceEquals(this.BackupProceduresField, value) != true)) {
                    this.BackupProceduresField = value;
                    this.RaisePropertyChanged("BackupProcedures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanAddSubprojects {
            get {
                return this.CanAddSubprojectsField;
            }
            set {
                if ((this.CanAddSubprojectsField.Equals(value) != true)) {
                    this.CanAddSubprojectsField = value;
                    this.RaisePropertyChanged("CanAddSubprojects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanAddTasks {
            get {
                return this.CanAddTasksField;
            }
            set {
                if ((this.CanAddTasksField.Equals(value) != true)) {
                    this.CanAddTasksField = value;
                    this.RaisePropertyChanged("CanAddTasks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((this.ClientIdField.Equals(value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientName {
            get {
                return this.ClientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientNameField, value) != true)) {
                    this.ClientNameField = value;
                    this.RaisePropertyChanged("ClientName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedByField, value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImportantNotes {
            get {
                return this.ImportantNotesField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportantNotesField, value) != true)) {
                    this.ImportantNotesField = value;
                    this.RaisePropertyChanged("ImportantNotes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSubprojectRequired {
            get {
                return this.IsSubprojectRequiredField;
            }
            set {
                if ((this.IsSubprojectRequiredField.Equals(value) != true)) {
                    this.IsSubprojectRequiredField = value;
                    this.RaisePropertyChanged("IsSubprojectRequired");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.Person[] Managers {
            get {
                return this.ManagersField;
            }
            set {
                if ((object.ReferenceEquals(this.ManagersField, value) != true)) {
                    this.ManagersField = value;
                    this.RaisePropertyChanged("Managers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ManagersNames {
            get {
                return this.ManagersNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.ManagersNamesField, value) != true)) {
                    this.ManagersNamesField = value;
                    this.RaisePropertyChanged("ManagersNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy {
            get {
                return this.ModifiedByField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifiedByField, value) != true)) {
                    this.ModifiedByField = value;
                    this.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ModifiedDate {
            get {
                return this.ModifiedDateField;
            }
            set {
                if ((this.ModifiedDateField.Equals(value) != true)) {
                    this.ModifiedDateField = value;
                    this.RaisePropertyChanged("ModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.Person[] Observers {
            get {
                return this.ObserversField;
            }
            set {
                if ((object.ReferenceEquals(this.ObserversField, value) != true)) {
                    this.ObserversField = value;
                    this.RaisePropertyChanged("Observers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ObserversNames {
            get {
                return this.ObserversNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.ObserversNamesField, value) != true)) {
                    this.ObserversNamesField = value;
                    this.RaisePropertyChanged("ObserversNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ParentProjectId {
            get {
                return this.ParentProjectIdField;
            }
            set {
                if ((this.ParentProjectIdField.Equals(value) != true)) {
                    this.ParentProjectIdField = value;
                    this.RaisePropertyChanged("ParentProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentProjectName {
            get {
                return this.ParentProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentProjectNameField, value) != true)) {
                    this.ParentProjectNameField = value;
                    this.RaisePropertyChanged("ParentProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectAccountId {
            get {
                return this.ProjectAccountIdField;
            }
            set {
                if ((this.ProjectAccountIdField.Equals(value) != true)) {
                    this.ProjectAccountIdField = value;
                    this.RaisePropertyChanged("ProjectAccountId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectAccountName {
            get {
                return this.ProjectAccountNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectAccountNameField, value) != true)) {
                    this.ProjectAccountNameField = value;
                    this.RaisePropertyChanged("ProjectAccountName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectCommunication {
            get {
                return this.ProjectCommunicationField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectCommunicationField, value) != true)) {
                    this.ProjectCommunicationField = value;
                    this.RaisePropertyChanged("ProjectCommunication");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectStatusId {
            get {
                return this.ProjectStatusIdField;
            }
            set {
                if ((this.ProjectStatusIdField.Equals(value) != true)) {
                    this.ProjectStatusIdField = value;
                    this.RaisePropertyChanged("ProjectStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectStatusName {
            get {
                return this.ProjectStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectStatusNameField, value) != true)) {
                    this.ProjectStatusNameField = value;
                    this.RaisePropertyChanged("ProjectStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ReferenceDate {
            get {
                return this.ReferenceDateField;
            }
            set {
                if ((this.ReferenceDateField.Equals(value) != true)) {
                    this.ReferenceDateField = value;
                    this.RaisePropertyChanged("ReferenceDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Repositories {
            get {
                return this.RepositoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoriesField, value) != true)) {
                    this.RepositoriesField = value;
                    this.RaisePropertyChanged("Repositories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceCodeOwner {
            get {
                return this.SourceCodeOwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceCodeOwnerField, value) != true)) {
                    this.SourceCodeOwnerField = value;
                    this.RaisePropertyChanged("SourceCodeOwner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusToSet {
            get {
                return this.StatusToSetField;
            }
            set {
                if ((this.StatusToSetField.Equals(value) != true)) {
                    this.StatusToSetField = value;
                    this.RaisePropertyChanged("StatusToSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusToSetName {
            get {
                return this.StatusToSetNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusToSetNameField, value) != true)) {
                    this.StatusToSetNameField = value;
                    this.RaisePropertyChanged("StatusToSetName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Technology {
            get {
                return this.TechnologyField;
            }
            set {
                if ((object.ReferenceEquals(this.TechnologyField, value) != true)) {
                    this.TechnologyField = value;
                    this.RaisePropertyChanged("Technology");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timesheet.TimesheetService.Timesheeter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timesheet.TimesheetService.CurrentUser))]
    public partial class Person : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Timesheeter", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class Timesheeter : Timesheet.TimesheetService.Person {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmploymentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal>[] HoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> HrAppIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HrStatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmploymentType {
            get {
                return this.EmploymentTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EmploymentTypeField, value) != true)) {
                    this.EmploymentTypeField = value;
                    this.RaisePropertyChanged("EmploymentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal>[] Hours {
            get {
                return this.HoursField;
            }
            set {
                if ((object.ReferenceEquals(this.HoursField, value) != true)) {
                    this.HoursField = value;
                    this.RaisePropertyChanged("Hours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> HrAppId {
            get {
                return this.HrAppIdField;
            }
            set {
                if ((this.HrAppIdField.Equals(value) != true)) {
                    this.HrAppIdField = value;
                    this.RaisePropertyChanged("HrAppId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HrStatus {
            get {
                return this.HrStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.HrStatusField, value) != true)) {
                    this.HrStatusField = value;
                    this.RaisePropertyChanged("HrStatus");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrentUser", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class CurrentUser : Timesheet.TimesheetService.Person {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdministratorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCreativeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOfficeWorkerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] MyAccountManagersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] MyProjectManagersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdministrator {
            get {
                return this.IsAdministratorField;
            }
            set {
                if ((this.IsAdministratorField.Equals(value) != true)) {
                    this.IsAdministratorField = value;
                    this.RaisePropertyChanged("IsAdministrator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCreative {
            get {
                return this.IsCreativeField;
            }
            set {
                if ((this.IsCreativeField.Equals(value) != true)) {
                    this.IsCreativeField = value;
                    this.RaisePropertyChanged("IsCreative");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOfficeWorker {
            get {
                return this.IsOfficeWorkerField;
            }
            set {
                if ((this.IsOfficeWorkerField.Equals(value) != true)) {
                    this.IsOfficeWorkerField = value;
                    this.RaisePropertyChanged("IsOfficeWorker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] MyAccountManagers {
            get {
                return this.MyAccountManagersField;
            }
            set {
                if ((object.ReferenceEquals(this.MyAccountManagersField, value) != true)) {
                    this.MyAccountManagersField = value;
                    this.RaisePropertyChanged("MyAccountManagers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] MyProjectManagers {
            get {
                return this.MyProjectManagersField;
            }
            set {
                if ((object.ReferenceEquals(this.MyProjectManagersField, value) != true)) {
                    this.MyProjectManagersField = value;
                    this.RaisePropertyChanged("MyProjectManagers");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectTreeNode", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class ProjectTreeNode : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> ActualHoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ActualHoursAsOfReferenceDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> ActualPercentageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ApprovingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Approving2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.Person[] AvailablePersonsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.Status[] AvailableStatusesToSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> EstimatedHoursAtCompletitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> EstimatedPercentageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> HoursLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.ProjectTreeNode[] ItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> RemainingHoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusToSetField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ActualHours {
            get {
                return this.ActualHoursField;
            }
            set {
                if ((this.ActualHoursField.Equals(value) != true)) {
                    this.ActualHoursField = value;
                    this.RaisePropertyChanged("ActualHours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ActualHoursAsOfReferenceDate {
            get {
                return this.ActualHoursAsOfReferenceDateField;
            }
            set {
                if ((this.ActualHoursAsOfReferenceDateField.Equals(value) != true)) {
                    this.ActualHoursAsOfReferenceDateField = value;
                    this.RaisePropertyChanged("ActualHoursAsOfReferenceDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ActualPercentage {
            get {
                return this.ActualPercentageField;
            }
            set {
                if ((this.ActualPercentageField.Equals(value) != true)) {
                    this.ActualPercentageField = value;
                    this.RaisePropertyChanged("ActualPercentage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Approving {
            get {
                return this.ApprovingField;
            }
            set {
                if ((this.ApprovingField.Equals(value) != true)) {
                    this.ApprovingField = value;
                    this.RaisePropertyChanged("Approving");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Approving2 {
            get {
                return this.Approving2Field;
            }
            set {
                if ((this.Approving2Field.Equals(value) != true)) {
                    this.Approving2Field = value;
                    this.RaisePropertyChanged("Approving2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.Person[] AvailablePersons {
            get {
                return this.AvailablePersonsField;
            }
            set {
                if ((object.ReferenceEquals(this.AvailablePersonsField, value) != true)) {
                    this.AvailablePersonsField = value;
                    this.RaisePropertyChanged("AvailablePersons");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.Status[] AvailableStatusesToSet {
            get {
                return this.AvailableStatusesToSetField;
            }
            set {
                if ((object.ReferenceEquals(this.AvailableStatusesToSetField, value) != true)) {
                    this.AvailableStatusesToSetField = value;
                    this.RaisePropertyChanged("AvailableStatusesToSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> EstimatedHoursAtCompletition {
            get {
                return this.EstimatedHoursAtCompletitionField;
            }
            set {
                if ((this.EstimatedHoursAtCompletitionField.Equals(value) != true)) {
                    this.EstimatedHoursAtCompletitionField = value;
                    this.RaisePropertyChanged("EstimatedHoursAtCompletition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> EstimatedPercentage {
            get {
                return this.EstimatedPercentageField;
            }
            set {
                if ((this.EstimatedPercentageField.Equals(value) != true)) {
                    this.EstimatedPercentageField = value;
                    this.RaisePropertyChanged("EstimatedPercentage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> HoursLimit {
            get {
                return this.HoursLimitField;
            }
            set {
                if ((this.HoursLimitField.Equals(value) != true)) {
                    this.HoursLimitField = value;
                    this.RaisePropertyChanged("HoursLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.ProjectTreeNode[] Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> RemainingHours {
            get {
                return this.RemainingHoursField;
            }
            set {
                if ((this.RemainingHoursField.Equals(value) != true)) {
                    this.RemainingHoursField = value;
                    this.RaisePropertyChanged("RemainingHours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusToSet {
            get {
                return this.StatusToSetField;
            }
            set {
                if ((this.StatusToSetField.Equals(value) != true)) {
                    this.StatusToSetField = value;
                    this.RaisePropertyChanged("StatusToSet");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Status", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class Status : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DefaultTransitionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsInitialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsProtectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SoldStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WeightField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DefaultTransitionId {
            get {
                return this.DefaultTransitionIdField;
            }
            set {
                if ((this.DefaultTransitionIdField.Equals(value) != true)) {
                    this.DefaultTransitionIdField = value;
                    this.RaisePropertyChanged("DefaultTransitionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInitial {
            get {
                return this.IsInitialField;
            }
            set {
                if ((this.IsInitialField.Equals(value) != true)) {
                    this.IsInitialField = value;
                    this.RaisePropertyChanged("IsInitial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsProtected {
            get {
                return this.IsProtectedField;
            }
            set {
                if ((this.IsProtectedField.Equals(value) != true)) {
                    this.IsProtectedField = value;
                    this.RaisePropertyChanged("IsProtected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SoldStatusId {
            get {
                return this.SoldStatusIdField;
            }
            set {
                if ((this.SoldStatusIdField.Equals(value) != true)) {
                    this.SoldStatusIdField = value;
                    this.RaisePropertyChanged("SoldStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class StandardFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Client", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class Client : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmployeesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PostalCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StreetAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebSiteField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Employees {
            get {
                return this.EmployeesField;
            }
            set {
                if ((this.EmployeesField.Equals(value) != true)) {
                    this.EmployeesField = value;
                    this.RaisePropertyChanged("Employees");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PostalCode {
            get {
                return this.PostalCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PostalCodeField, value) != true)) {
                    this.PostalCodeField = value;
                    this.RaisePropertyChanged("PostalCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Region {
            get {
                return this.RegionField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionField, value) != true)) {
                    this.RegionField = value;
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StreetAddress {
            get {
                return this.StreetAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetAddressField, value) != true)) {
                    this.StreetAddressField = value;
                    this.RaisePropertyChanged("StreetAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WebSite {
            get {
                return this.WebSiteField;
            }
            set {
                if ((object.ReferenceEquals(this.WebSiteField, value) != true)) {
                    this.WebSiteField = value;
                    this.RaisePropertyChanged("WebSite");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectAccount", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class ProjectAccount : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.Person[] ManagersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ManagersNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.Person[] ObserversField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ObserversNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ProjectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> StatusToSetField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedByField, value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.Person[] Managers {
            get {
                return this.ManagersField;
            }
            set {
                if ((object.ReferenceEquals(this.ManagersField, value) != true)) {
                    this.ManagersField = value;
                    this.RaisePropertyChanged("Managers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ManagersNames {
            get {
                return this.ManagersNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.ManagersNamesField, value) != true)) {
                    this.ManagersNamesField = value;
                    this.RaisePropertyChanged("ManagersNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy {
            get {
                return this.ModifiedByField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifiedByField, value) != true)) {
                    this.ModifiedByField = value;
                    this.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ModifiedDate {
            get {
                return this.ModifiedDateField;
            }
            set {
                if ((this.ModifiedDateField.Equals(value) != true)) {
                    this.ModifiedDateField = value;
                    this.RaisePropertyChanged("ModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.Person[] Observers {
            get {
                return this.ObserversField;
            }
            set {
                if ((object.ReferenceEquals(this.ObserversField, value) != true)) {
                    this.ObserversField = value;
                    this.RaisePropertyChanged("Observers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ObserversNames {
            get {
                return this.ObserversNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.ObserversNamesField, value) != true)) {
                    this.ObserversNamesField = value;
                    this.RaisePropertyChanged("ObserversNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Projects {
            get {
                return this.ProjectsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectsField, value) != true)) {
                    this.ProjectsField = value;
                    this.RaisePropertyChanged("Projects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> StatusToSet {
            get {
                return this.StatusToSetField;
            }
            set {
                if ((this.StatusToSetField.Equals(value) != true)) {
                    this.StatusToSetField = value;
                    this.RaisePropertyChanged("StatusToSet");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubprojectNewTask", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class SubprojectNewTask : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.ProjectTreeNode NewTaskNodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.ProjectTreeNode SubprojectNodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.ProjectTreeNode NewTaskNode {
            get {
                return this.NewTaskNodeField;
            }
            set {
                if ((object.ReferenceEquals(this.NewTaskNodeField, value) != true)) {
                    this.NewTaskNodeField = value;
                    this.RaisePropertyChanged("NewTaskNode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.ProjectTreeNode SubprojectNode {
            get {
                return this.SubprojectNodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SubprojectNodeField, value) != true)) {
                    this.SubprojectNodeField = value;
                    this.RaisePropertyChanged("SubprojectNode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfirmationDate", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class ConfirmationDate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DueDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LimitDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectAccountIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DueDate {
            get {
                return this.DueDateField;
            }
            set {
                if ((this.DueDateField.Equals(value) != true)) {
                    this.DueDateField = value;
                    this.RaisePropertyChanged("DueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LimitDate {
            get {
                return this.LimitDateField;
            }
            set {
                if ((this.LimitDateField.Equals(value) != true)) {
                    this.LimitDateField = value;
                    this.RaisePropertyChanged("LimitDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectAccountId {
            get {
                return this.ProjectAccountIdField;
            }
            set {
                if ((this.ProjectAccountIdField.Equals(value) != true)) {
                    this.ProjectAccountIdField = value;
                    this.RaisePropertyChanged("ProjectAccountId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Dashboard", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class Dashboard : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CompletionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReadyForApprovalCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RejectedCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CompletionDate {
            get {
                return this.CompletionDateField;
            }
            set {
                if ((this.CompletionDateField.Equals(value) != true)) {
                    this.CompletionDateField = value;
                    this.RaisePropertyChanged("CompletionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReadyForApprovalCount {
            get {
                return this.ReadyForApprovalCountField;
            }
            set {
                if ((this.ReadyForApprovalCountField.Equals(value) != true)) {
                    this.ReadyForApprovalCountField = value;
                    this.RaisePropertyChanged("ReadyForApprovalCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RejectedCount {
            get {
                return this.RejectedCountField;
            }
            set {
                if ((this.RejectedCountField.Equals(value) != true)) {
                    this.RejectedCountField = value;
                    this.RaisePropertyChanged("RejectedCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Scope", Namespace="")]
    public enum Scope : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllItems = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MyItems = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForMyApproval = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PendingItems = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Project = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Client = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProjectAccount = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Errors = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Correction = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Person = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Inconsistencies = 10,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SummaryBy", Namespace="")]
    public enum SummaryBy : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Month = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Date = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Summary", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class Summary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal HoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Hours {
            get {
                return this.HoursField;
            }
            set {
                if ((this.HoursField.Equals(value) != true)) {
                    this.HoursField = value;
                    this.RaisePropertyChanged("Hours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeletableLocation", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class DeletableLocation : Timesheet.TimesheetService.Location {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanBeDeletedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanBeDeleted {
            get {
                return this.CanBeDeletedField;
            }
            set {
                if ((this.CanBeDeletedField.Equals(value) != true)) {
                    this.CanBeDeletedField = value;
                    this.RaisePropertyChanged("CanBeDeleted");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Timesheet.TimesheetService.DeletableLocation))]
    public partial class Location : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SoldHours", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class SoldHours : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmploymentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal HourPercentCurrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal HourPercentDiffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal HourPercentPrevField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MonthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MonthSoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmploymentType {
            get {
                return this.EmploymentTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EmploymentTypeField, value) != true)) {
                    this.EmploymentTypeField = value;
                    this.RaisePropertyChanged("EmploymentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal HourPercentCurr {
            get {
                return this.HourPercentCurrField;
            }
            set {
                if ((this.HourPercentCurrField.Equals(value) != true)) {
                    this.HourPercentCurrField = value;
                    this.RaisePropertyChanged("HourPercentCurr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal HourPercentDiff {
            get {
                return this.HourPercentDiffField;
            }
            set {
                if ((this.HourPercentDiffField.Equals(value) != true)) {
                    this.HourPercentDiffField = value;
                    this.RaisePropertyChanged("HourPercentDiff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal HourPercentPrev {
            get {
                return this.HourPercentPrevField;
            }
            set {
                if ((this.HourPercentPrevField.Equals(value) != true)) {
                    this.HourPercentPrevField = value;
                    this.RaisePropertyChanged("HourPercentPrev");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Month {
            get {
                return this.MonthField;
            }
            set {
                if ((object.ReferenceEquals(this.MonthField, value) != true)) {
                    this.MonthField = value;
                    this.RaisePropertyChanged("Month");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MonthSold {
            get {
                return this.MonthSoldField;
            }
            set {
                if ((object.ReferenceEquals(this.MonthSoldField, value) != true)) {
                    this.MonthSoldField = value;
                    this.RaisePropertyChanged("MonthSold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Range", Namespace="")]
    public enum Range : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LastNWeeks = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LastMonth = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CurrentMonth = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TwoMonths = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LastNMonths = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Custom = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllTime = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CreativeWork", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class CreativeWork : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal CreativeWorkHoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.CreativeWorkItem[] CreativeWorkItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal CreativeWorksPercentageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal HoursMissingInTSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal NonCreativeWorkHoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PersonIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PersonNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TotalWorkHoursField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal CreativeWorkHours {
            get {
                return this.CreativeWorkHoursField;
            }
            set {
                if ((this.CreativeWorkHoursField.Equals(value) != true)) {
                    this.CreativeWorkHoursField = value;
                    this.RaisePropertyChanged("CreativeWorkHours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.CreativeWorkItem[] CreativeWorkItems {
            get {
                return this.CreativeWorkItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.CreativeWorkItemsField, value) != true)) {
                    this.CreativeWorkItemsField = value;
                    this.RaisePropertyChanged("CreativeWorkItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal CreativeWorksPercentage {
            get {
                return this.CreativeWorksPercentageField;
            }
            set {
                if ((this.CreativeWorksPercentageField.Equals(value) != true)) {
                    this.CreativeWorksPercentageField = value;
                    this.RaisePropertyChanged("CreativeWorksPercentage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal HoursMissingInTS {
            get {
                return this.HoursMissingInTSField;
            }
            set {
                if ((this.HoursMissingInTSField.Equals(value) != true)) {
                    this.HoursMissingInTSField = value;
                    this.RaisePropertyChanged("HoursMissingInTS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModifiedDate {
            get {
                return this.ModifiedDateField;
            }
            set {
                if ((this.ModifiedDateField.Equals(value) != true)) {
                    this.ModifiedDateField = value;
                    this.RaisePropertyChanged("ModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal NonCreativeWorkHours {
            get {
                return this.NonCreativeWorkHoursField;
            }
            set {
                if ((this.NonCreativeWorkHoursField.Equals(value) != true)) {
                    this.NonCreativeWorkHoursField = value;
                    this.RaisePropertyChanged("NonCreativeWorkHours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PersonId {
            get {
                return this.PersonIdField;
            }
            set {
                if ((this.PersonIdField.Equals(value) != true)) {
                    this.PersonIdField = value;
                    this.RaisePropertyChanged("PersonId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PersonName {
            get {
                return this.PersonNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonNameField, value) != true)) {
                    this.PersonNameField = value;
                    this.RaisePropertyChanged("PersonName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TotalWorkHours {
            get {
                return this.TotalWorkHoursField;
            }
            set {
                if ((this.TotalWorkHoursField.Equals(value) != true)) {
                    this.TotalWorkHoursField = value;
                    this.RaisePropertyChanged("TotalWorkHours");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CreativeWorkItem", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class CreativeWorkItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsModifiedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsModified {
            get {
                return this.IsModifiedField;
            }
            set {
                if ((this.IsModifiedField.Equals(value) != true)) {
                    this.IsModifiedField = value;
                    this.RaisePropertyChanged("IsModified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimesheetWeekSummary", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class TimesheetWeekSummary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ConfirmedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ForReviewField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TotalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.TimesheetWeekSummary.WorkingDay[] WorkingDaysField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Confirmed {
            get {
                return this.ConfirmedField;
            }
            set {
                if ((this.ConfirmedField.Equals(value) != true)) {
                    this.ConfirmedField = value;
                    this.RaisePropertyChanged("Confirmed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ForReview {
            get {
                return this.ForReviewField;
            }
            set {
                if ((this.ForReviewField.Equals(value) != true)) {
                    this.ForReviewField = value;
                    this.RaisePropertyChanged("ForReview");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.TimesheetWeekSummary.WorkingDay[] WorkingDays {
            get {
                return this.WorkingDaysField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkingDaysField, value) != true)) {
                    this.WorkingDaysField = value;
                    this.RaisePropertyChanged("WorkingDays");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="TimesheetWeekSummary.WorkingDay", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        [System.SerializableAttribute()]
        public partial class WorkingDay : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private System.DateTime DateField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private System.Nullable<decimal> HoursField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private bool IsApprovedField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.DateTime Date {
                get {
                    return this.DateField;
                }
                set {
                    if ((this.DateField.Equals(value) != true)) {
                        this.DateField = value;
                        this.RaisePropertyChanged("Date");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.Nullable<decimal> Hours {
                get {
                    return this.HoursField;
                }
                set {
                    if ((this.HoursField.Equals(value) != true)) {
                        this.HoursField = value;
                        this.RaisePropertyChanged("Hours");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public bool IsApproved {
                get {
                    return this.IsApprovedField;
                }
                set {
                    if ((this.IsApprovedField.Equals(value) != true)) {
                        this.IsApprovedField = value;
                        this.RaisePropertyChanged("IsApproved");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimesheetVisualization", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class TimesheetVisualization : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime WeekEndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime WeekStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.TimesheetVisualization.WorkingHours[] WorkingHoursDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime WeekEnd {
            get {
                return this.WeekEndField;
            }
            set {
                if ((this.WeekEndField.Equals(value) != true)) {
                    this.WeekEndField = value;
                    this.RaisePropertyChanged("WeekEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime WeekStart {
            get {
                return this.WeekStartField;
            }
            set {
                if ((this.WeekStartField.Equals(value) != true)) {
                    this.WeekStartField = value;
                    this.RaisePropertyChanged("WeekStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.TimesheetVisualization.WorkingHours[] WorkingHoursData {
            get {
                return this.WorkingHoursDataField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkingHoursDataField, value) != true)) {
                    this.WorkingHoursDataField = value;
                    this.RaisePropertyChanged("WorkingHoursData");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="TimesheetVisualization.WorkingHours", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        [System.SerializableAttribute()]
        public partial class WorkingHours : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private System.DateTime DateField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private decimal HoursField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.DateTime Date {
                get {
                    return this.DateField;
                }
                set {
                    if ((this.DateField.Equals(value) != true)) {
                        this.DateField = value;
                        this.RaisePropertyChanged("Date");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public decimal Hours {
                get {
                    return this.HoursField;
                }
                set {
                    if ((this.HoursField.Equals(value) != true)) {
                        this.HoursField = value;
                        this.RaisePropertyChanged("Hours");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Inconsistencies", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class Inconsistencies : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.Inconsistency[] ListField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.Inconsistency[] List {
            get {
                return this.ListField;
            }
            set {
                if ((object.ReferenceEquals(this.ListField, value) != true)) {
                    this.ListField = value;
                    this.RaisePropertyChanged("List");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Inconsistency", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class Inconsistency : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimesheetSummary", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class TimesheetSummary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal HoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PersonIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Hours {
            get {
                return this.HoursField;
            }
            set {
                if ((this.HoursField.Equals(value) != true)) {
                    this.HoursField = value;
                    this.RaisePropertyChanged("Hours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PersonId {
            get {
                return this.PersonIdField;
            }
            set {
                if ((this.PersonIdField.Equals(value) != true)) {
                    this.PersonIdField = value;
                    this.RaisePropertyChanged("PersonId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimesheetRecord", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class TimesheetRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApprovalNoteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ApprovalStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApprovalStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ApprovedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApprovedByNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.Subproject[] AvailableSubprojectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.Task[] AvailableTasksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedByNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CreativeStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreativeStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal HoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IsSoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IsSoldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastReportMonthSoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LocationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModifiedByNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MonthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MonthSoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartialApprovalNoteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaymentStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PersonIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PersonNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatedMonthSoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SubprojectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubprojectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TaskIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeekField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApprovalNote {
            get {
                return this.ApprovalNoteField;
            }
            set {
                if ((object.ReferenceEquals(this.ApprovalNoteField, value) != true)) {
                    this.ApprovalNoteField = value;
                    this.RaisePropertyChanged("ApprovalNote");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ApprovalStatusId {
            get {
                return this.ApprovalStatusIdField;
            }
            set {
                if ((this.ApprovalStatusIdField.Equals(value) != true)) {
                    this.ApprovalStatusIdField = value;
                    this.RaisePropertyChanged("ApprovalStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApprovalStatusName {
            get {
                return this.ApprovalStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ApprovalStatusNameField, value) != true)) {
                    this.ApprovalStatusNameField = value;
                    this.RaisePropertyChanged("ApprovalStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ApprovedBy {
            get {
                return this.ApprovedByField;
            }
            set {
                if ((this.ApprovedByField.Equals(value) != true)) {
                    this.ApprovedByField = value;
                    this.RaisePropertyChanged("ApprovedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApprovedByName {
            get {
                return this.ApprovedByNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ApprovedByNameField, value) != true)) {
                    this.ApprovedByNameField = value;
                    this.RaisePropertyChanged("ApprovedByName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.Subproject[] AvailableSubprojects {
            get {
                return this.AvailableSubprojectsField;
            }
            set {
                if ((object.ReferenceEquals(this.AvailableSubprojectsField, value) != true)) {
                    this.AvailableSubprojectsField = value;
                    this.RaisePropertyChanged("AvailableSubprojects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.Task[] AvailableTasks {
            get {
                return this.AvailableTasksField;
            }
            set {
                if ((object.ReferenceEquals(this.AvailableTasksField, value) != true)) {
                    this.AvailableTasksField = value;
                    this.RaisePropertyChanged("AvailableTasks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Client {
            get {
                return this.ClientField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientField, value) != true)) {
                    this.ClientField = value;
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((this.CreatedByField.Equals(value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedByName {
            get {
                return this.CreatedByNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedByNameField, value) != true)) {
                    this.CreatedByNameField = value;
                    this.RaisePropertyChanged("CreatedByName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CreativeStatusId {
            get {
                return this.CreativeStatusIdField;
            }
            set {
                if ((this.CreativeStatusIdField.Equals(value) != true)) {
                    this.CreativeStatusIdField = value;
                    this.RaisePropertyChanged("CreativeStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreativeStatusName {
            get {
                return this.CreativeStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CreativeStatusNameField, value) != true)) {
                    this.CreativeStatusNameField = value;
                    this.RaisePropertyChanged("CreativeStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Hours {
            get {
                return this.HoursField;
            }
            set {
                if ((this.HoursField.Equals(value) != true)) {
                    this.HoursField = value;
                    this.RaisePropertyChanged("Hours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IsSold {
            get {
                return this.IsSoldField;
            }
            set {
                if ((this.IsSoldField.Equals(value) != true)) {
                    this.IsSoldField = value;
                    this.RaisePropertyChanged("IsSold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IsSoldName {
            get {
                return this.IsSoldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IsSoldNameField, value) != true)) {
                    this.IsSoldNameField = value;
                    this.RaisePropertyChanged("IsSoldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastReportMonthSold {
            get {
                return this.LastReportMonthSoldField;
            }
            set {
                if ((object.ReferenceEquals(this.LastReportMonthSoldField, value) != true)) {
                    this.LastReportMonthSoldField = value;
                    this.RaisePropertyChanged("LastReportMonthSold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LocationId {
            get {
                return this.LocationIdField;
            }
            set {
                if ((this.LocationIdField.Equals(value) != true)) {
                    this.LocationIdField = value;
                    this.RaisePropertyChanged("LocationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationName {
            get {
                return this.LocationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationNameField, value) != true)) {
                    this.LocationNameField = value;
                    this.RaisePropertyChanged("LocationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ModifiedBy {
            get {
                return this.ModifiedByField;
            }
            set {
                if ((this.ModifiedByField.Equals(value) != true)) {
                    this.ModifiedByField = value;
                    this.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedByName {
            get {
                return this.ModifiedByNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifiedByNameField, value) != true)) {
                    this.ModifiedByNameField = value;
                    this.RaisePropertyChanged("ModifiedByName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModifiedDate {
            get {
                return this.ModifiedDateField;
            }
            set {
                if ((this.ModifiedDateField.Equals(value) != true)) {
                    this.ModifiedDateField = value;
                    this.RaisePropertyChanged("ModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Month {
            get {
                return this.MonthField;
            }
            set {
                if ((object.ReferenceEquals(this.MonthField, value) != true)) {
                    this.MonthField = value;
                    this.RaisePropertyChanged("Month");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MonthSold {
            get {
                return this.MonthSoldField;
            }
            set {
                if ((object.ReferenceEquals(this.MonthSoldField, value) != true)) {
                    this.MonthSoldField = value;
                    this.RaisePropertyChanged("MonthSold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartialApprovalNote {
            get {
                return this.PartialApprovalNoteField;
            }
            set {
                if ((object.ReferenceEquals(this.PartialApprovalNoteField, value) != true)) {
                    this.PartialApprovalNoteField = value;
                    this.RaisePropertyChanged("PartialApprovalNote");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaymentStatus {
            get {
                return this.PaymentStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.PaymentStatusField, value) != true)) {
                    this.PaymentStatusField = value;
                    this.RaisePropertyChanged("PaymentStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PersonId {
            get {
                return this.PersonIdField;
            }
            set {
                if ((this.PersonIdField.Equals(value) != true)) {
                    this.PersonIdField = value;
                    this.RaisePropertyChanged("PersonId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PersonName {
            get {
                return this.PersonNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonNameField, value) != true)) {
                    this.PersonNameField = value;
                    this.RaisePropertyChanged("PersonName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatedMonthSold {
            get {
                return this.StatedMonthSoldField;
            }
            set {
                if ((object.ReferenceEquals(this.StatedMonthSoldField, value) != true)) {
                    this.StatedMonthSoldField = value;
                    this.RaisePropertyChanged("StatedMonthSold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusId {
            get {
                return this.StatusIdField;
            }
            set {
                if ((this.StatusIdField.Equals(value) != true)) {
                    this.StatusIdField = value;
                    this.RaisePropertyChanged("StatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusName {
            get {
                return this.StatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusNameField, value) != true)) {
                    this.StatusNameField = value;
                    this.RaisePropertyChanged("StatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SubprojectId {
            get {
                return this.SubprojectIdField;
            }
            set {
                if ((this.SubprojectIdField.Equals(value) != true)) {
                    this.SubprojectIdField = value;
                    this.RaisePropertyChanged("SubprojectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubprojectName {
            get {
                return this.SubprojectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SubprojectNameField, value) != true)) {
                    this.SubprojectNameField = value;
                    this.RaisePropertyChanged("SubprojectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskId {
            get {
                return this.TaskIdField;
            }
            set {
                if ((this.TaskIdField.Equals(value) != true)) {
                    this.TaskIdField = value;
                    this.RaisePropertyChanged("TaskId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskName {
            get {
                return this.TaskNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskNameField, value) != true)) {
                    this.TaskNameField = value;
                    this.RaisePropertyChanged("TaskName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Week {
            get {
                return this.WeekField;
            }
            set {
                if ((object.ReferenceEquals(this.WeekField, value) != true)) {
                    this.WeekField = value;
                    this.RaisePropertyChanged("Week");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Subproject", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class Subproject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusToSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SubprojectStatusIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusToSet {
            get {
                return this.StatusToSetField;
            }
            set {
                if ((this.StatusToSetField.Equals(value) != true)) {
                    this.StatusToSetField = value;
                    this.RaisePropertyChanged("StatusToSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SubprojectStatusId {
            get {
                return this.SubprojectStatusIdField;
            }
            set {
                if ((this.SubprojectStatusIdField.Equals(value) != true)) {
                    this.SubprojectStatusIdField = value;
                    this.RaisePropertyChanged("SubprojectStatusId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Task", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class Task : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectAccountStatuses", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class ProjectAccountStatuses : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccountManagersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccountNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ProjectNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.StatusForProjectAccount[] StatusesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountManagers {
            get {
                return this.AccountManagersField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountManagersField, value) != true)) {
                    this.AccountManagersField = value;
                    this.RaisePropertyChanged("AccountManagers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountName {
            get {
                return this.AccountNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountNameField, value) != true)) {
                    this.AccountNameField = value;
                    this.RaisePropertyChanged("AccountName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ProjectNames {
            get {
                return this.ProjectNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNamesField, value) != true)) {
                    this.ProjectNamesField = value;
                    this.RaisePropertyChanged("ProjectNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.StatusForProjectAccount[] Statuses {
            get {
                return this.StatusesField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusesField, value) != true)) {
                    this.StatusesField = value;
                    this.RaisePropertyChanged("Statuses");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusForProjectAccount", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class StatusForProjectAccount : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal[] HoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal[] Hours {
            get {
                return this.HoursField;
            }
            set {
                if ((object.ReferenceEquals(this.HoursField, value) != true)) {
                    this.HoursField = value;
                    this.RaisePropertyChanged("Hours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusName {
            get {
                return this.StatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusNameField, value) != true)) {
                    this.StatusNameField = value;
                    this.RaisePropertyChanged("StatusName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApprovalStatus", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class ApprovalStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContractTitle", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class ContractTitle : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.ContractTitleItem[] ItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MonthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartialCommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PersonIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((this.CreatedByField.Equals(value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.ContractTitleItem[] Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ModifiedBy {
            get {
                return this.ModifiedByField;
            }
            set {
                if ((this.ModifiedByField.Equals(value) != true)) {
                    this.ModifiedByField = value;
                    this.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ModifiedDate {
            get {
                return this.ModifiedDateField;
            }
            set {
                if ((this.ModifiedDateField.Equals(value) != true)) {
                    this.ModifiedDateField = value;
                    this.RaisePropertyChanged("ModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Month {
            get {
                return this.MonthField;
            }
            set {
                if ((object.ReferenceEquals(this.MonthField, value) != true)) {
                    this.MonthField = value;
                    this.RaisePropertyChanged("Month");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartialComment {
            get {
                return this.PartialCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.PartialCommentField, value) != true)) {
                    this.PartialCommentField = value;
                    this.RaisePropertyChanged("PartialComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PersonId {
            get {
                return this.PersonIdField;
            }
            set {
                if ((this.PersonIdField.Equals(value) != true)) {
                    this.PersonIdField = value;
                    this.RaisePropertyChanged("PersonId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusId {
            get {
                return this.StatusIdField;
            }
            set {
                if ((this.StatusIdField.Equals(value) != true)) {
                    this.StatusIdField = value;
                    this.RaisePropertyChanged("StatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContractTitleItem", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class ContractTitleItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EditableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal HoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Editable {
            get {
                return this.EditableField;
            }
            set {
                if ((this.EditableField.Equals(value) != true)) {
                    this.EditableField = value;
                    this.RaisePropertyChanged("Editable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Hours {
            get {
                return this.HoursField;
            }
            set {
                if ((this.HoursField.Equals(value) != true)) {
                    this.HoursField = value;
                    this.RaisePropertyChanged("Hours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContractTitleStatus", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class ContractTitleStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmployeeInfo", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class EmployeeInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DomainGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.EmploymentInfo[] EmploymentInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MainCompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UniqueIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DomainGuid {
            get {
                return this.DomainGuidField;
            }
            set {
                if ((this.DomainGuidField.Equals(value) != true)) {
                    this.DomainGuidField = value;
                    this.RaisePropertyChanged("DomainGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.EmploymentInfo[] EmploymentInfo {
            get {
                return this.EmploymentInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.EmploymentInfoField, value) != true)) {
                    this.EmploymentInfoField = value;
                    this.RaisePropertyChanged("EmploymentInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MainCompany {
            get {
                return this.MainCompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.MainCompanyField, value) != true)) {
                    this.MainCompanyField = value;
                    this.RaisePropertyChanged("MainCompany");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UniqueId {
            get {
                return this.UniqueIdField;
            }
            set {
                if ((this.UniqueIdField.Equals(value) != true)) {
                    this.UniqueIdField = value;
                    this.RaisePropertyChanged("UniqueId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmploymentInfo", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class EmploymentInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Timesheet.TimesheetService.EmploymentType EmploymentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PartOfFullTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PersonStatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Timesheet.TimesheetService.EmploymentType Employment {
            get {
                return this.EmploymentField;
            }
            set {
                if ((this.EmploymentField.Equals(value) != true)) {
                    this.EmploymentField = value;
                    this.RaisePropertyChanged("Employment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PartOfFullTime {
            get {
                return this.PartOfFullTimeField;
            }
            set {
                if ((this.PartOfFullTimeField.Equals(value) != true)) {
                    this.PartOfFullTimeField = value;
                    this.RaisePropertyChanged("PartOfFullTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PersonStatus {
            get {
                return this.PersonStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonStatusField, value) != true)) {
                    this.PersonStatusField = value;
                    this.RaisePropertyChanged("PersonStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmploymentType", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    public enum EmploymentType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EmploymentContract = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecificTaskContract = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FreelanceAgreement = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SelfEmployment = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Alt_Project", Namespace="http://schemas.datacontract.org/2004/07/LGBS.Timesheet.DataService.Alt")]
    [System.SerializableAttribute()]
    public partial class Alt_Project : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanAddSubprojectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanAddTasksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSubprojectRequiredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectStatusIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanAddSubprojects {
            get {
                return this.CanAddSubprojectsField;
            }
            set {
                if ((this.CanAddSubprojectsField.Equals(value) != true)) {
                    this.CanAddSubprojectsField = value;
                    this.RaisePropertyChanged("CanAddSubprojects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanAddTasks {
            get {
                return this.CanAddTasksField;
            }
            set {
                if ((this.CanAddTasksField.Equals(value) != true)) {
                    this.CanAddTasksField = value;
                    this.RaisePropertyChanged("CanAddTasks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSubprojectRequired {
            get {
                return this.IsSubprojectRequiredField;
            }
            set {
                if ((this.IsSubprojectRequiredField.Equals(value) != true)) {
                    this.IsSubprojectRequiredField = value;
                    this.RaisePropertyChanged("IsSubprojectRequired");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectStatusId {
            get {
                return this.ProjectStatusIdField;
            }
            set {
                if ((this.ProjectStatusIdField.Equals(value) != true)) {
                    this.ProjectStatusIdField = value;
                    this.RaisePropertyChanged("ProjectStatusId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Alt_TimesheetRecord", Namespace="http://schemas.datacontract.org/2004/07/LGBS.Timesheet.DataService.Alt")]
    [System.SerializableAttribute()]
    public partial class Alt_TimesheetRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApprovalNoteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApprovedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DelayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DirtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal HoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IsApprovedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IsCreativeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IsSoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastReportMonthSoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModifiedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MonthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MonthSoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartialApprovalNoteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PayingCompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaymentStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatedMonthSoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubprojectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WeekField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApprovalNote {
            get {
                return this.ApprovalNoteField;
            }
            set {
                if ((object.ReferenceEquals(this.ApprovalNoteField, value) != true)) {
                    this.ApprovalNoteField = value;
                    this.RaisePropertyChanged("ApprovalNote");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApprovedBy {
            get {
                return this.ApprovedByField;
            }
            set {
                if ((object.ReferenceEquals(this.ApprovedByField, value) != true)) {
                    this.ApprovedByField = value;
                    this.RaisePropertyChanged("ApprovedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedByField, value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Delay {
            get {
                return this.DelayField;
            }
            set {
                if ((this.DelayField.Equals(value) != true)) {
                    this.DelayField = value;
                    this.RaisePropertyChanged("Delay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Dirty {
            get {
                return this.DirtyField;
            }
            set {
                if ((this.DirtyField.Equals(value) != true)) {
                    this.DirtyField = value;
                    this.RaisePropertyChanged("Dirty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Hours {
            get {
                return this.HoursField;
            }
            set {
                if ((this.HoursField.Equals(value) != true)) {
                    this.HoursField = value;
                    this.RaisePropertyChanged("Hours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IsApproved {
            get {
                return this.IsApprovedField;
            }
            set {
                if ((object.ReferenceEquals(this.IsApprovedField, value) != true)) {
                    this.IsApprovedField = value;
                    this.RaisePropertyChanged("IsApproved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IsCreative {
            get {
                return this.IsCreativeField;
            }
            set {
                if ((object.ReferenceEquals(this.IsCreativeField, value) != true)) {
                    this.IsCreativeField = value;
                    this.RaisePropertyChanged("IsCreative");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IsSold {
            get {
                return this.IsSoldField;
            }
            set {
                if ((object.ReferenceEquals(this.IsSoldField, value) != true)) {
                    this.IsSoldField = value;
                    this.RaisePropertyChanged("IsSold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastReportMonthSold {
            get {
                return this.LastReportMonthSoldField;
            }
            set {
                if ((object.ReferenceEquals(this.LastReportMonthSoldField, value) != true)) {
                    this.LastReportMonthSoldField = value;
                    this.RaisePropertyChanged("LastReportMonthSold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Modified {
            get {
                return this.ModifiedField;
            }
            set {
                if ((this.ModifiedField.Equals(value) != true)) {
                    this.ModifiedField = value;
                    this.RaisePropertyChanged("Modified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy {
            get {
                return this.ModifiedByField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifiedByField, value) != true)) {
                    this.ModifiedByField = value;
                    this.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Month {
            get {
                return this.MonthField;
            }
            set {
                if ((object.ReferenceEquals(this.MonthField, value) != true)) {
                    this.MonthField = value;
                    this.RaisePropertyChanged("Month");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MonthSold {
            get {
                return this.MonthSoldField;
            }
            set {
                if ((object.ReferenceEquals(this.MonthSoldField, value) != true)) {
                    this.MonthSoldField = value;
                    this.RaisePropertyChanged("MonthSold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartialApprovalNote {
            get {
                return this.PartialApprovalNoteField;
            }
            set {
                if ((object.ReferenceEquals(this.PartialApprovalNoteField, value) != true)) {
                    this.PartialApprovalNoteField = value;
                    this.RaisePropertyChanged("PartialApprovalNote");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PayingCompany {
            get {
                return this.PayingCompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.PayingCompanyField, value) != true)) {
                    this.PayingCompanyField = value;
                    this.RaisePropertyChanged("PayingCompany");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaymentStatus {
            get {
                return this.PaymentStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.PaymentStatusField, value) != true)) {
                    this.PaymentStatusField = value;
                    this.RaisePropertyChanged("PaymentStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Person {
            get {
                return this.PersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonField, value) != true)) {
                    this.PersonField = value;
                    this.RaisePropertyChanged("Person");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Project {
            get {
                return this.ProjectField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectField, value) != true)) {
                    this.ProjectField = value;
                    this.RaisePropertyChanged("Project");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatedMonthSold {
            get {
                return this.StatedMonthSoldField;
            }
            set {
                if ((object.ReferenceEquals(this.StatedMonthSoldField, value) != true)) {
                    this.StatedMonthSoldField = value;
                    this.RaisePropertyChanged("StatedMonthSold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subproject {
            get {
                return this.SubprojectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubprojectField, value) != true)) {
                    this.SubprojectField = value;
                    this.RaisePropertyChanged("Subproject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Task {
            get {
                return this.TaskField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskField, value) != true)) {
                    this.TaskField = value;
                    this.RaisePropertyChanged("Task");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Week {
            get {
                return this.WeekField;
            }
            set {
                if ((object.ReferenceEquals(this.WeekField, value) != true)) {
                    this.WeekField = value;
                    this.RaisePropertyChanged("Week");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CreativeStatus", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class CreativeStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectInfo", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class ProjectInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectStatusIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectStatusId {
            get {
                return this.ProjectStatusIdField;
            }
            set {
                if ((this.ProjectStatusIdField.Equals(value) != true)) {
                    this.ProjectStatusIdField = value;
                    this.RaisePropertyChanged("ProjectStatusId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IsSoldStatus", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class IsSoldStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HistoryRecord", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class HistoryRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApprovalNoteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApprovalStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApprovedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreativeStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IsSoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MonthSoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartialApprovalNoteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaymentStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatedMonthSoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubprojectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimesheetIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApprovalNote {
            get {
                return this.ApprovalNoteField;
            }
            set {
                if ((object.ReferenceEquals(this.ApprovalNoteField, value) != true)) {
                    this.ApprovalNoteField = value;
                    this.RaisePropertyChanged("ApprovalNote");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApprovalStatus {
            get {
                return this.ApprovalStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.ApprovalStatusField, value) != true)) {
                    this.ApprovalStatusField = value;
                    this.RaisePropertyChanged("ApprovalStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApprovedBy {
            get {
                return this.ApprovedByField;
            }
            set {
                if ((object.ReferenceEquals(this.ApprovedByField, value) != true)) {
                    this.ApprovedByField = value;
                    this.RaisePropertyChanged("ApprovedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreativeStatus {
            get {
                return this.CreativeStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.CreativeStatusField, value) != true)) {
                    this.CreativeStatusField = value;
                    this.RaisePropertyChanged("CreativeStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hours {
            get {
                return this.HoursField;
            }
            set {
                if ((object.ReferenceEquals(this.HoursField, value) != true)) {
                    this.HoursField = value;
                    this.RaisePropertyChanged("Hours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IsSold {
            get {
                return this.IsSoldField;
            }
            set {
                if ((object.ReferenceEquals(this.IsSoldField, value) != true)) {
                    this.IsSoldField = value;
                    this.RaisePropertyChanged("IsSold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy {
            get {
                return this.ModifiedByField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifiedByField, value) != true)) {
                    this.ModifiedByField = value;
                    this.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModifiedDate {
            get {
                return this.ModifiedDateField;
            }
            set {
                if ((this.ModifiedDateField.Equals(value) != true)) {
                    this.ModifiedDateField = value;
                    this.RaisePropertyChanged("ModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MonthSold {
            get {
                return this.MonthSoldField;
            }
            set {
                if ((object.ReferenceEquals(this.MonthSoldField, value) != true)) {
                    this.MonthSoldField = value;
                    this.RaisePropertyChanged("MonthSold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartialApprovalNote {
            get {
                return this.PartialApprovalNoteField;
            }
            set {
                if ((object.ReferenceEquals(this.PartialApprovalNoteField, value) != true)) {
                    this.PartialApprovalNoteField = value;
                    this.RaisePropertyChanged("PartialApprovalNote");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaymentStatus {
            get {
                return this.PaymentStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.PaymentStatusField, value) != true)) {
                    this.PaymentStatusField = value;
                    this.RaisePropertyChanged("PaymentStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Person {
            get {
                return this.PersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonField, value) != true)) {
                    this.PersonField = value;
                    this.RaisePropertyChanged("Person");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Project {
            get {
                return this.ProjectField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectField, value) != true)) {
                    this.ProjectField = value;
                    this.RaisePropertyChanged("Project");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatedMonthSold {
            get {
                return this.StatedMonthSoldField;
            }
            set {
                if ((object.ReferenceEquals(this.StatedMonthSoldField, value) != true)) {
                    this.StatedMonthSoldField = value;
                    this.RaisePropertyChanged("StatedMonthSold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subproject {
            get {
                return this.SubprojectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubprojectField, value) != true)) {
                    this.SubprojectField = value;
                    this.RaisePropertyChanged("Subproject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Task {
            get {
                return this.TaskField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskField, value) != true)) {
                    this.TaskField = value;
                    this.RaisePropertyChanged("Task");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimesheetId {
            get {
                return this.TimesheetIdField;
            }
            set {
                if ((this.TimesheetIdField.Equals(value) != true)) {
                    this.TimesheetIdField = value;
                    this.RaisePropertyChanged("TimesheetId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectHistoryRecord", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class ProjectHistoryRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChangeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HistoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RecordTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChangeType {
            get {
                return this.ChangeTypeField;
            }
            set {
                if ((this.ChangeTypeField.Equals(value) != true)) {
                    this.ChangeTypeField = value;
                    this.RaisePropertyChanged("ChangeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string History {
            get {
                return this.HistoryField;
            }
            set {
                if ((object.ReferenceEquals(this.HistoryField, value) != true)) {
                    this.HistoryField = value;
                    this.RaisePropertyChanged("History");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy {
            get {
                return this.ModifiedByField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifiedByField, value) != true)) {
                    this.ModifiedByField = value;
                    this.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModifiedDate {
            get {
                return this.ModifiedDateField;
            }
            set {
                if ((this.ModifiedDateField.Equals(value) != true)) {
                    this.ModifiedDateField = value;
                    this.RaisePropertyChanged("ModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RecordType {
            get {
                return this.RecordTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.RecordTypeField, value) != true)) {
                    this.RecordTypeField = value;
                    this.RaisePropertyChanged("RecordType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectStatus", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class ProjectStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectAccountInfo", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
    [System.SerializableAttribute()]
    public partial class ProjectAccountInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="TimesheetService.DataService")]
    public interface DataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectTree", ReplyAction="urn:DataService/GetProjectTreeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetProjectTreeStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.ProjectTreeNode[] GetProjectTree(string context, Timesheet.TimesheetService.Project project);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectTree", ReplyAction="urn:DataService/GetProjectTreeResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.ProjectTreeNode[]> GetProjectTreeAsync(string context, Timesheet.TimesheetService.Project project);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateProjectsGridData", ReplyAction="urn:DataService/UpdateProjectsGridDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/UpdateProjectsGridDataStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void UpdateProjectsGridData(string context, Timesheet.TimesheetService.Project[] projects);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateProjectsGridData", ReplyAction="urn:DataService/UpdateProjectsGridDataResponse")]
        System.Threading.Tasks.Task UpdateProjectsGridDataAsync(string context, Timesheet.TimesheetService.Project[] projects);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/CreateProject", ReplyAction="urn:DataService/CreateProjectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/CreateProjectStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Project CreateProject(string context, Timesheet.TimesheetService.Project project, Timesheet.TimesheetService.Client client, Timesheet.TimesheetService.ProjectAccount account);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/CreateProject", ReplyAction="urn:DataService/CreateProjectResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Project> CreateProjectAsync(string context, Timesheet.TimesheetService.Project project, Timesheet.TimesheetService.Client client, Timesheet.TimesheetService.ProjectAccount account);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/ModifyProjectTree", ReplyAction="urn:DataService/ModifyProjectTreeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/ModifyProjectTreeStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        int ModifyProjectTree(string context, Timesheet.TimesheetService.Project project, Timesheet.TimesheetService.ProjectTreeNode projectNode, Timesheet.TimesheetService.ProjectTreeNode[] subprojectNodesToUpdate, System.Collections.Generic.Dictionary<Timesheet.TimesheetService.ProjectTreeNode, Timesheet.TimesheetService.ProjectTreeNode> taskNodesToUpdate, int[] subprojectsToDeleteIds, System.Collections.Generic.Dictionary<Timesheet.TimesheetService.ProjectTreeNode, Timesheet.TimesheetService.ProjectTreeNode> taskNodesTaskSubprojectNodes, System.Collections.Generic.Dictionary<Timesheet.TimesheetService.ProjectTreeNode, Timesheet.TimesheetService.SubprojectNewTask> tasksToMoveRecordsFrom, Timesheet.TimesheetService.ConfirmationDate[] dates);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/ModifyProjectTree", ReplyAction="urn:DataService/ModifyProjectTreeResponse")]
        System.Threading.Tasks.Task<int> ModifyProjectTreeAsync(string context, Timesheet.TimesheetService.Project project, Timesheet.TimesheetService.ProjectTreeNode projectNode, Timesheet.TimesheetService.ProjectTreeNode[] subprojectNodesToUpdate, System.Collections.Generic.Dictionary<Timesheet.TimesheetService.ProjectTreeNode, Timesheet.TimesheetService.ProjectTreeNode> taskNodesToUpdate, int[] subprojectsToDeleteIds, System.Collections.Generic.Dictionary<Timesheet.TimesheetService.ProjectTreeNode, Timesheet.TimesheetService.ProjectTreeNode> taskNodesTaskSubprojectNodes, System.Collections.Generic.Dictionary<Timesheet.TimesheetService.ProjectTreeNode, Timesheet.TimesheetService.SubprojectNewTask> tasksToMoveRecordsFrom, Timesheet.TimesheetService.ConfirmationDate[] dates);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectObservers", ReplyAction="urn:DataService/GetProjectObserversResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetProjectObserversStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Person[] GetProjectObservers(string context, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectObservers", ReplyAction="urn:DataService/GetProjectObserversResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetProjectObserversAsync(string context, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectAccountObservers", ReplyAction="urn:DataService/GetProjectAccountObserversResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetProjectAccountObserversStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Person[] GetProjectAccountObservers(string context, int projectAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectAccountObservers", ReplyAction="urn:DataService/GetProjectAccountObserversResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetProjectAccountObserversAsync(string context, int projectAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetClients", ReplyAction="urn:DataService/GetClientsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetClientsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Client[] GetClients(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetClients", ReplyAction="urn:DataService/GetClientsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Client[]> GetClientsAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetClient", ReplyAction="urn:DataService/GetClientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetClientStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Client GetClient(string context, int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetClient", ReplyAction="urn:DataService/GetClientResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Client> GetClientAsync(string context, int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/DeleteClient", ReplyAction="urn:DataService/DeleteClientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/DeleteClientStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        bool DeleteClient(string context, int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/DeleteClient", ReplyAction="urn:DataService/DeleteClientResponse")]
        System.Threading.Tasks.Task<bool> DeleteClientAsync(string context, int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/CreateClient", ReplyAction="urn:DataService/CreateClientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/CreateClientStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        int CreateClient(string context, Timesheet.TimesheetService.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/CreateClient", ReplyAction="urn:DataService/CreateClientResponse")]
        System.Threading.Tasks.Task<int> CreateClientAsync(string context, Timesheet.TimesheetService.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateClient", ReplyAction="urn:DataService/UpdateClientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/UpdateClientStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void UpdateClient(string context, Timesheet.TimesheetService.Client client, bool editProjects);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateClient", ReplyAction="urn:DataService/UpdateClientResponse")]
        System.Threading.Tasks.Task UpdateClientAsync(string context, Timesheet.TimesheetService.Client client, bool editProjects);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetAccountProjectNames", ReplyAction="urn:DataService/GetAccountProjectNamesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetAccountProjectNamesStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        string[] GetAccountProjectNames(string context, int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetAccountProjectNames", ReplyAction="urn:DataService/GetAccountProjectNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetAccountProjectNamesAsync(string context, int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetAllAccountManagers", ReplyAction="urn:DataService/GetAllAccountManagersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetAllAccountManagersStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Person[] GetAllAccountManagers(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetAllAccountManagers", ReplyAction="urn:DataService/GetAllAccountManagersResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetAllAccountManagersAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetAccountManagers", ReplyAction="urn:DataService/GetAccountManagersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetAccountManagersStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Person[] GetAccountManagers(string context, int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetAccountManagers", ReplyAction="urn:DataService/GetAccountManagersResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetAccountManagersAsync(string context, int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetAccountObservers", ReplyAction="urn:DataService/GetAccountObserversResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetAccountObserversStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Person[] GetAccountObservers(string context, int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetAccountObservers", ReplyAction="urn:DataService/GetAccountObserversResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetAccountObserversAsync(string context, int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateProjectAccount", ReplyAction="urn:DataService/UpdateProjectAccountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/UpdateProjectAccountStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.ProjectAccount UpdateProjectAccount(string context, Timesheet.TimesheetService.ProjectAccount projectAccount, Timesheet.TimesheetService.ConfirmationDate[] dates);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateProjectAccount", ReplyAction="urn:DataService/UpdateProjectAccountResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.ProjectAccount> UpdateProjectAccountAsync(string context, Timesheet.TimesheetService.ProjectAccount projectAccount, Timesheet.TimesheetService.ConfirmationDate[] dates);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/DeleteProjectAccount", ReplyAction="urn:DataService/DeleteProjectAccountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/DeleteProjectAccountStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        bool DeleteProjectAccount(string context, int projectAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/DeleteProjectAccount", ReplyAction="urn:DataService/DeleteProjectAccountResponse")]
        System.Threading.Tasks.Task<bool> DeleteProjectAccountAsync(string context, int projectAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetDashboard", ReplyAction="urn:DataService/GetDashboardResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetDashboardStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Dashboard GetDashboard(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetDashboard", ReplyAction="urn:DataService/GetDashboardResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Dashboard> GetDashboardAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetSummary", ReplyAction="urn:DataService/GetSummaryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetSummaryStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Summary[] GetSummary(string context, int userId, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.SummaryBy by, System.DateTime dateFrom, System.DateTime dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetSummary", ReplyAction="urn:DataService/GetSummaryResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Summary[]> GetSummaryAsync(string context, int userId, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.SummaryBy by, System.DateTime dateFrom, System.DateTime dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/updateGlobalConfirmationDates", ReplyAction="urn:DataService/updateGlobalConfirmationDatesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/updateGlobalConfirmationDatesStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void updateGlobalConfirmationDates(string context, Timesheet.TimesheetService.ConfirmationDate[] dates);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/updateGlobalConfirmationDates", ReplyAction="urn:DataService/updateGlobalConfirmationDatesResponse")]
        System.Threading.Tasks.Task updateGlobalConfirmationDatesAsync(string context, Timesheet.TimesheetService.ConfirmationDate[] dates);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/getConfirmationDates", ReplyAction="urn:DataService/getConfirmationDatesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/getConfirmationDatesStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.ConfirmationDate[] getConfirmationDates(string context, System.Nullable<int> projectAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/getConfirmationDates", ReplyAction="urn:DataService/getConfirmationDatesResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.ConfirmationDate[]> getConfirmationDatesAsync(string context, System.Nullable<int> projectAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/PlanReportGeneration", ReplyAction="urn:DataService/PlanReportGenerationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/PlanReportGenerationStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.PlanReportGenerationResponse PlanReportGeneration(Timesheet.TimesheetService.PlanReportGenerationRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/PlanReportGeneration", ReplyAction="urn:DataService/PlanReportGenerationResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.PlanReportGenerationResponse> PlanReportGenerationAsync(Timesheet.TimesheetService.PlanReportGenerationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/CloseLastMonth", ReplyAction="urn:DataService/CloseLastMonthResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/CloseLastMonthStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void CloseLastMonth(string context, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/CloseLastMonth", ReplyAction="urn:DataService/CloseLastMonthResponse")]
        System.Threading.Tasks.Task CloseLastMonthAsync(string context, string month);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/ClosePreviousYear", ReplyAction="urn:DataService/ClosePreviousYearResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/ClosePreviousYearStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void ClosePreviousYear(string context, string year);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/ClosePreviousYear", ReplyAction="urn:DataService/ClosePreviousYearResponse")]
        System.Threading.Tasks.Task ClosePreviousYearAsync(string context, string year);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateTimesheetSettings", ReplyAction="urn:DataService/UpdateTimesheetSettingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/UpdateTimesheetSettingsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void UpdateTimesheetSettings(string context, System.Collections.Generic.KeyValuePair<string, string>[] settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateTimesheetSettings", ReplyAction="urn:DataService/UpdateTimesheetSettingsResponse")]
        System.Threading.Tasks.Task UpdateTimesheetSettingsAsync(string context, System.Collections.Generic.KeyValuePair<string, string>[] settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateLocations", ReplyAction="urn:DataService/UpdateLocationsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/UpdateLocationsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.DeletableLocation[] UpdateLocations(string context, Timesheet.TimesheetService.DeletableLocation[] locations);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateLocations", ReplyAction="urn:DataService/UpdateLocationsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.DeletableLocation[]> UpdateLocationsAsync(string context, Timesheet.TimesheetService.DeletableLocation[] locations);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetSettings", ReplyAction="urn:DataService/GetTimesheetSettingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetTimesheetSettingsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        System.Collections.Generic.KeyValuePair<string, string>[] GetTimesheetSettings(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetSettings", ReplyAction="urn:DataService/GetTimesheetSettingsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, string>[]> GetTimesheetSettingsAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetHoursForTimesheeters", ReplyAction="urn:DataService/GetHoursForTimesheetersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetHoursForTimesheetersStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Timesheeter[] GetHoursForTimesheeters(string context, Timesheet.TimesheetService.Timesheeter[] timesheeters, System.DateTime m, int n);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetHoursForTimesheeters", ReplyAction="urn:DataService/GetHoursForTimesheetersResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Timesheeter[]> GetHoursForTimesheetersAsync(string context, Timesheet.TimesheetService.Timesheeter[] timesheeters, System.DateTime m, int n);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheeters", ReplyAction="urn:DataService/GetTimesheetersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetTimesheetersStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Timesheeter[] GetTimesheeters(string context, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheeters", ReplyAction="urn:DataService/GetTimesheetersResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Timesheeter[]> GetTimesheetersAsync(string context, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetSoldHoursDifference", ReplyAction="urn:DataService/GetSoldHoursDifferenceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetSoldHoursDifferenceStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.SoldHours[] GetSoldHoursDifference(string context, System.DateTime currentMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetSoldHoursDifference", ReplyAction="urn:DataService/GetSoldHoursDifferenceResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.SoldHours[]> GetSoldHoursDifferenceAsync(string context, System.DateTime currentMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetSoldHoursMonths", ReplyAction="urn:DataService/GetSoldHoursMonthsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetSoldHoursMonthsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        string[] GetSoldHoursMonths(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetSoldHoursMonths", ReplyAction="urn:DataService/GetSoldHoursMonthsResponse")]
        System.Threading.Tasks.Task<string[]> GetSoldHoursMonthsAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetCreativeWorksScopeRange", ReplyAction="urn:DataService/GetCreativeWorksScopeRangeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetCreativeWorksScopeRangeStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.CreativeWork[] GetCreativeWorksScopeRange(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetCreativeWorksScopeRange", ReplyAction="urn:DataService/GetCreativeWorksScopeRangeResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.CreativeWork[]> GetCreativeWorksScopeRangeAsync(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetCreativeWorksScopeMonth", ReplyAction="urn:DataService/GetCreativeWorksScopeMonthResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetCreativeWorksScopeMonthStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.CreativeWork[] GetCreativeWorksScopeMonth(string context, Timesheet.TimesheetService.Scope scope, System.DateTime month);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetCreativeWorksScopeMonth", ReplyAction="urn:DataService/GetCreativeWorksScopeMonthResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.CreativeWork[]> GetCreativeWorksScopeMonthAsync(string context, Timesheet.TimesheetService.Scope scope, System.DateTime month);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetCreativeWork", ReplyAction="urn:DataService/GetCreativeWorkResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetCreativeWorkStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.CreativeWork GetCreativeWork(string context, int personId, System.DateTime month);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetCreativeWork", ReplyAction="urn:DataService/GetCreativeWorkResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.CreativeWork> GetCreativeWorkAsync(string context, int personId, System.DateTime month);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetUpdatedCreativeWork", ReplyAction="urn:DataService/GetUpdatedCreativeWorkResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetUpdatedCreativeWorkStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.CreativeWork GetUpdatedCreativeWork(string context, Timesheet.TimesheetService.CreativeWork creativeWork);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetUpdatedCreativeWork", ReplyAction="urn:DataService/GetUpdatedCreativeWorkResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.CreativeWork> GetUpdatedCreativeWorkAsync(string context, Timesheet.TimesheetService.CreativeWork creativeWork);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/RefreshCreativeWork", ReplyAction="urn:DataService/RefreshCreativeWorkResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/RefreshCreativeWorkStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void RefreshCreativeWork(string context, int creativeWorkId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/RefreshCreativeWork", ReplyAction="urn:DataService/RefreshCreativeWorkResponse")]
        System.Threading.Tasks.Task RefreshCreativeWorkAsync(string context, int creativeWorkId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateComment", ReplyAction="urn:DataService/UpdateCommentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/UpdateCommentStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void UpdateComment(string context, int creativeWorkId, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateComment", ReplyAction="urn:DataService/UpdateCommentResponse")]
        System.Threading.Tasks.Task UpdateCommentAsync(string context, int creativeWorkId, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateCreativeWorkItem", ReplyAction="urn:DataService/UpdateCreativeWorkItemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/UpdateCreativeWorkItemStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void UpdateCreativeWorkItem(string context, Timesheet.TimesheetService.CreativeWorkItem item, int creativeWorkId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateCreativeWorkItem", ReplyAction="urn:DataService/UpdateCreativeWorkItemResponse")]
        System.Threading.Tasks.Task UpdateCreativeWorkItemAsync(string context, Timesheet.TimesheetService.CreativeWorkItem item, int creativeWorkId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/IsOfficeWorker", ReplyAction="urn:DataService/IsOfficeWorkerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/IsOfficeWorkerStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        bool IsOfficeWorker(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/IsOfficeWorker", ReplyAction="urn:DataService/IsOfficeWorkerResponse")]
        System.Threading.Tasks.Task<bool> IsOfficeWorkerAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GenerateCreativeWorkRecords", ReplyAction="urn:DataService/GenerateCreativeWorkRecordsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GenerateCreativeWorkRecordsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void GenerateCreativeWorkRecords(string context, System.DateTime month);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GenerateCreativeWorkRecords", ReplyAction="urn:DataService/GenerateCreativeWorkRecordsResponse")]
        System.Threading.Tasks.Task GenerateCreativeWorkRecordsAsync(string context, System.DateTime month);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetLastMonth", ReplyAction="urn:DataService/GetLastMonthResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetLastMonthStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        System.DateTime GetLastMonth();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetLastMonth", ReplyAction="urn:DataService/GetLastMonthResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetLastMonthAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetMonthsForCreativeWorksReport", ReplyAction="urn:DataService/GetMonthsForCreativeWorksReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetMonthsForCreativeWorksReportStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        System.DateTime[] GetMonthsForCreativeWorksReport(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetMonthsForCreativeWorksReport", ReplyAction="urn:DataService/GetMonthsForCreativeWorksReportResponse")]
        System.Threading.Tasks.Task<System.DateTime[]> GetMonthsForCreativeWorksReportAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetMonthsForPersonsCreativeWorksReport", ReplyAction="urn:DataService/GetMonthsForPersonsCreativeWorksReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetMonthsForPersonsCreativeWorksReportStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        System.DateTime[] GetMonthsForPersonsCreativeWorksReport(string context, int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetMonthsForPersonsCreativeWorksReport", ReplyAction="urn:DataService/GetMonthsForPersonsCreativeWorksReportResponse")]
        System.Threading.Tasks.Task<System.DateTime[]> GetMonthsForPersonsCreativeWorksReportAsync(string context, int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/DeleteCreativeWork", ReplyAction="urn:DataService/DeleteCreativeWorkResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/DeleteCreativeWorkStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void DeleteCreativeWork(string context, int[] creativeWorkIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/DeleteCreativeWork", ReplyAction="urn:DataService/DeleteCreativeWorkResponse")]
        System.Threading.Tasks.Task DeleteCreativeWorkAsync(string context, int[] creativeWorkIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetWeekSummary", ReplyAction="urn:DataService/GetWeekSummaryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetWeekSummaryStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetWeekSummary[] GetWeekSummary(string context, System.DateTime date, int weeksCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetWeekSummary", ReplyAction="urn:DataService/GetWeekSummaryResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetWeekSummary[]> GetWeekSummaryAsync(string context, System.DateTime date, int weeksCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetWeekVisualization", ReplyAction="urn:DataService/GetWeekVisualizationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetWeekVisualizationStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetVisualization[] GetWeekVisualization(string context, System.DateTime weekStart);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetWeekVisualization", ReplyAction="urn:DataService/GetWeekVisualizationResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetVisualization[]> GetWeekVisualizationAsync(string context, System.DateTime weekStart);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetInconsistencies", ReplyAction="urn:DataService/GetInconsistenciesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetInconsistenciesStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Inconsistencies GetInconsistencies();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetInconsistencies", ReplyAction="urn:DataService/GetInconsistenciesResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Inconsistencies> GetInconsistenciesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetSummaryOfInconsistencies", ReplyAction="urn:DataService/GetSummaryOfInconsistenciesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetSummaryOfInconsistenciesStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetSummary[] GetSummaryOfInconsistencies(string context, string id, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetSummaryOfInconsistencies", ReplyAction="urn:DataService/GetSummaryOfInconsistenciesResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetSummary[]> GetSummaryOfInconsistenciesAsync(string context, string id, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetWithInconsistencies", ReplyAction="urn:DataService/GetTimesheetWithInconsistenciesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetTimesheetWithInconsistenciesStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetWithInconsistencies(string context, string id, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate, System.Nullable<int> projectId, System.Nullable<int> personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetWithInconsistencies", ReplyAction="urn:DataService/GetTimesheetWithInconsistenciesResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetWithInconsistenciesAsync(string context, string id, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate, System.Nullable<int> projectId, System.Nullable<int> personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/IsAdministrator", ReplyAction="urn:DataService/IsAdministratorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/IsAdministratorStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        bool IsAdministrator(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/IsAdministrator", ReplyAction="urn:DataService/IsAdministratorResponse")]
        System.Threading.Tasks.Task<bool> IsAdministratorAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectAccountStatusesData", ReplyAction="urn:DataService/GetProjectAccountStatusesDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetProjectAccountStatusesDataStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.GetProjectAccountStatusesDataResponse GetProjectAccountStatusesData(Timesheet.TimesheetService.GetProjectAccountStatusesDataRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectAccountStatusesData", ReplyAction="urn:DataService/GetProjectAccountStatusesDataResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.GetProjectAccountStatusesDataResponse> GetProjectAccountStatusesDataAsync(Timesheet.TimesheetService.GetProjectAccountStatusesDataRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectAccountStatusData", ReplyAction="urn:DataService/GetProjectAccountStatusDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetProjectAccountStatusDataStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.ProjectAccountStatuses GetProjectAccountStatusData(string context, System.DateTime minDate, System.DateTime maxDate, Timesheet.TimesheetService.ProjectAccount projectAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectAccountStatusData", ReplyAction="urn:DataService/GetProjectAccountStatusDataResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.ProjectAccountStatuses> GetProjectAccountStatusDataAsync(string context, System.DateTime minDate, System.DateTime maxDate, Timesheet.TimesheetService.ProjectAccount projectAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateProjectAccountStatuses", ReplyAction="urn:DataService/UpdateProjectAccountStatusesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/UpdateProjectAccountStatusesStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void UpdateProjectAccountStatuses(string context, Timesheet.TimesheetService.TimesheetRecord[] records, bool approve, bool changePaymentStatuses);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateProjectAccountStatuses", ReplyAction="urn:DataService/UpdateProjectAccountStatusesResponse")]
        System.Threading.Tasks.Task UpdateProjectAccountStatusesAsync(string context, Timesheet.TimesheetService.TimesheetRecord[] records, bool approve, bool changePaymentStatuses);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/InsertContractTitle", ReplyAction="urn:DataService/InsertContractTitleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/InsertContractTitleStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.ContractTitle InsertContractTitle(string context, Timesheet.TimesheetService.ContractTitle title);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/InsertContractTitle", ReplyAction="urn:DataService/InsertContractTitleResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.ContractTitle> InsertContractTitleAsync(string context, Timesheet.TimesheetService.ContractTitle title);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/DeleteContractTitle", ReplyAction="urn:DataService/DeleteContractTitleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/DeleteContractTitleStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void DeleteContractTitle(string context, int titleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/DeleteContractTitle", ReplyAction="urn:DataService/DeleteContractTitleResponse")]
        System.Threading.Tasks.Task DeleteContractTitleAsync(string context, int titleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateContractTitle", ReplyAction="urn:DataService/UpdateContractTitleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/UpdateContractTitleStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.ContractTitle UpdateContractTitle(string context, Timesheet.TimesheetService.ContractTitle title);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateContractTitle", ReplyAction="urn:DataService/UpdateContractTitleResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.ContractTitle> UpdateContractTitleAsync(string context, Timesheet.TimesheetService.ContractTitle title);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetContractTitleItemsForTitle", ReplyAction="urn:DataService/GetContractTitleItemsForTitleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetContractTitleItemsForTitleStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.ContractTitleItem[] GetContractTitleItemsForTitle(string context, Timesheet.TimesheetService.ContractTitle title);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetContractTitleItemsForTitle", ReplyAction="urn:DataService/GetContractTitleItemsForTitleResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.ContractTitleItem[]> GetContractTitleItemsForTitleAsync(string context, Timesheet.TimesheetService.ContractTitle title);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetContractTitleItems", ReplyAction="urn:DataService/GetContractTitleItemsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetContractTitleItemsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.ContractTitleItem[] GetContractTitleItems(string context, string month, int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetContractTitleItems", ReplyAction="urn:DataService/GetContractTitleItemsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.ContractTitleItem[]> GetContractTitleItemsAsync(string context, string month, int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetContractTitles", ReplyAction="urn:DataService/GetContractTitlesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetContractTitlesStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.ContractTitle[] GetContractTitles(string context, string fromDate, string toDate, Timesheet.TimesheetService.Scope scope);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetContractTitles", ReplyAction="urn:DataService/GetContractTitlesResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.ContractTitle[]> GetContractTitlesAsync(string context, string fromDate, string toDate, Timesheet.TimesheetService.Scope scope);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetContractTitleStatuses", ReplyAction="urn:DataService/GetContractTitleStatusesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetContractTitleStatusesStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.ContractTitleStatus[] GetContractTitleStatuses(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetContractTitleStatuses", ReplyAction="urn:DataService/GetContractTitleStatusesResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.ContractTitleStatus[]> GetContractTitleStatusesAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateEmployeeInfo", ReplyAction="urn:DataService/UpdateEmployeeInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/UpdateEmployeeInfoStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void UpdateEmployeeInfo(Timesheet.TimesheetService.EmployeeInfo employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateEmployeeInfo", ReplyAction="urn:DataService/UpdateEmployeeInfoResponse")]
        System.Threading.Tasks.Task UpdateEmployeeInfoAsync(Timesheet.TimesheetService.EmployeeInfo employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetSubprojectId", ReplyAction="urn:DataService/Alt_GetSubprojectIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_GetSubprojectIdStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        int Alt_GetSubprojectId(string context, int projectId, string subprojectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetSubprojectId", ReplyAction="urn:DataService/Alt_GetSubprojectIdResponse")]
        System.Threading.Tasks.Task<int> Alt_GetSubprojectIdAsync(string context, int projectId, string subprojectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetAvailableTasks", ReplyAction="urn:DataService/Alt_GetAvailableTasksResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_GetAvailableTasksStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Task[] Alt_GetAvailableTasks(string context, System.Nullable<int> projectId, System.Nullable<int> subprojectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetAvailableTasks", ReplyAction="urn:DataService/Alt_GetAvailableTasksResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Task[]> Alt_GetAvailableTasksAsync(string context, System.Nullable<int> projectId, System.Nullable<int> subprojectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetAvailableSubprojects", ReplyAction="urn:DataService/Alt_GetAvailableSubprojectsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_GetAvailableSubprojectsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Subproject[] Alt_GetAvailableSubprojects(string context, System.Nullable<int> projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetAvailableSubprojects", ReplyAction="urn:DataService/Alt_GetAvailableSubprojectsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Subproject[]> Alt_GetAvailableSubprojectsAsync(string context, System.Nullable<int> projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetLocations", ReplyAction="urn:DataService/GetLocationsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetLocationsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Location[] GetLocations(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetLocations", ReplyAction="urn:DataService/GetLocationsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Location[]> GetLocationsAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTasks", ReplyAction="urn:DataService/Alt_GetTasksResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_GetTasksStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Task[] Alt_GetTasks(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTasks", ReplyAction="urn:DataService/Alt_GetTasksResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Task[]> Alt_GetTasksAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetProjects", ReplyAction="urn:DataService/Alt_GetProjectsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_GetProjectsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_Project[] Alt_GetProjects(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetProjects", ReplyAction="urn:DataService/Alt_GetProjectsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_Project[]> Alt_GetProjectsAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetRecord", ReplyAction="urn:DataService/Alt_GetTimesheetRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_GetTimesheetRecordStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetRecord Alt_GetTimesheetRecord(string context, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetRecord", ReplyAction="urn:DataService/Alt_GetTimesheetRecordResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord> Alt_GetTimesheetRecordAsync(string context, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_DuplicateRecord", ReplyAction="urn:DataService/Alt_DuplicateRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_DuplicateRecordStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_DuplicateRecord(string context, Timesheet.TimesheetService.TimesheetRecord newRecord, int count, bool incrementDays, string newSubprojectName, string newTaskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_DuplicateRecord", ReplyAction="urn:DataService/Alt_DuplicateRecordResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_DuplicateRecordAsync(string context, Timesheet.TimesheetService.TimesheetRecord newRecord, int count, bool incrementDays, string newSubprojectName, string newTaskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_SplitRecord", ReplyAction="urn:DataService/Alt_SplitRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_SplitRecordStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_SplitRecordResponse Alt_SplitRecord(Timesheet.TimesheetService.Alt_SplitRecordRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_SplitRecord", ReplyAction="urn:DataService/Alt_SplitRecordResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_SplitRecordResponse> Alt_SplitRecordAsync(Timesheet.TimesheetService.Alt_SplitRecordRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_InsertFromClipboard", ReplyAction="urn:DataService/Alt_InsertFromClipboardResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_InsertFromClipboardStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_InsertFromClipboard(string context, Timesheet.TimesheetService.Alt_TimesheetRecord[] newRecords, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_InsertFromClipboard", ReplyAction="urn:DataService/Alt_InsertFromClipboardResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_InsertFromClipboardAsync(string context, Timesheet.TimesheetService.Alt_TimesheetRecord[] newRecords, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_InsertRecords", ReplyAction="urn:DataService/Alt_InsertRecordsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_InsertRecordsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_InsertRecords(string context, Timesheet.TimesheetService.TimesheetRecord newRecord, int count, bool incrementDays, string newSubprojectName, string newTaskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_InsertRecords", ReplyAction="urn:DataService/Alt_InsertRecordsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_InsertRecordsAsync(string context, Timesheet.TimesheetService.TimesheetRecord newRecord, int count, bool incrementDays, string newSubprojectName, string newTaskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ChangeSubproject", ReplyAction="urn:DataService/Alt_ChangeSubprojectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_ChangeSubprojectStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_ChangeSubprojectResponse Alt_ChangeSubproject(Timesheet.TimesheetService.Alt_ChangeSubprojectRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ChangeSubproject", ReplyAction="urn:DataService/Alt_ChangeSubprojectResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ChangeSubprojectResponse> Alt_ChangeSubprojectAsync(Timesheet.TimesheetService.Alt_ChangeSubprojectRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ChangeProject", ReplyAction="urn:DataService/Alt_ChangeProjectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_ChangeProjectStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_ChangeProjectResponse Alt_ChangeProject(Timesheet.TimesheetService.Alt_ChangeProjectRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ChangeProject", ReplyAction="urn:DataService/Alt_ChangeProjectResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ChangeProjectResponse> Alt_ChangeProjectAsync(Timesheet.TimesheetService.Alt_ChangeProjectRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ChangeTask", ReplyAction="urn:DataService/Alt_ChangeTaskResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_ChangeTaskStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_ChangeTaskResponse Alt_ChangeTask(Timesheet.TimesheetService.Alt_ChangeTaskRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ChangeTask", ReplyAction="urn:DataService/Alt_ChangeTaskResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ChangeTaskResponse> Alt_ChangeTaskAsync(Timesheet.TimesheetService.Alt_ChangeTaskRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ChangeStatus", ReplyAction="urn:DataService/Alt_ChangeStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_ChangeStatusStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_ChangeStatusResponse Alt_ChangeStatus(Timesheet.TimesheetService.Alt_ChangeStatusRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ChangeStatus", ReplyAction="urn:DataService/Alt_ChangeStatusResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ChangeStatusResponse> Alt_ChangeStatusAsync(Timesheet.TimesheetService.Alt_ChangeStatusRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_UpdateRecord", ReplyAction="urn:DataService/Alt_UpdateRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_UpdateRecordStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_TimesheetRecord Alt_UpdateRecord(string context, Timesheet.TimesheetService.TimesheetRecord record, System.Collections.Generic.Dictionary<string, string> columnsToEdit, string newSubprojectName, string newTaskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_UpdateRecord", ReplyAction="urn:DataService/Alt_UpdateRecordResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord> Alt_UpdateRecordAsync(string context, Timesheet.TimesheetService.TimesheetRecord record, System.Collections.Generic.Dictionary<string, string> columnsToEdit, string newSubprojectName, string newTaskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetWithInconsistencies", ReplyAction="urn:DataService/Alt_GetTimesheetWithInconsistenciesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_GetTimesheetWithInconsistenciesStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_GetTimesheetWithInconsistencies(string context, string id, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate, System.Nullable<int> projectId, System.Nullable<int> personId, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetWithInconsistencies", ReplyAction="urn:DataService/Alt_GetTimesheetWithInconsistenciesResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_GetTimesheetWithInconsistenciesAsync(string context, string id, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate, System.Nullable<int> projectId, System.Nullable<int> personId, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetScopeRange", ReplyAction="urn:DataService/Alt_GetTimesheetScopeRangeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_GetTimesheetScopeRangeStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_GetTimesheetScopeRange(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetScopeRange", ReplyAction="urn:DataService/Alt_GetTimesheetScopeRangeResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_GetTimesheetScopeRangeAsync(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetScopeIdRangeN", ReplyAction="urn:DataService/Alt_GetTimesheetScopeIdRangeNResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_GetTimesheetScopeIdRangeNStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_GetTimesheetScopeIdRangeN(string context, Timesheet.TimesheetService.Scope scope, int id, Timesheet.TimesheetService.Range range, int n, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetScopeIdRangeN", ReplyAction="urn:DataService/Alt_GetTimesheetScopeIdRangeNResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_GetTimesheetScopeIdRangeNAsync(string context, Timesheet.TimesheetService.Scope scope, int id, Timesheet.TimesheetService.Range range, int n, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetScopeIdRange", ReplyAction="urn:DataService/Alt_GetTimesheetScopeIdRangeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_GetTimesheetScopeIdRangeStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_GetTimesheetScopeIdRange(string context, Timesheet.TimesheetService.Scope scope, int id, Timesheet.TimesheetService.Range range, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetScopeIdRange", ReplyAction="urn:DataService/Alt_GetTimesheetScopeIdRangeResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_GetTimesheetScopeIdRangeAsync(string context, Timesheet.TimesheetService.Scope scope, int id, Timesheet.TimesheetService.Range range, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetScopeRangeN", ReplyAction="urn:DataService/Alt_GetTimesheetScopeRangeNResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_GetTimesheetScopeRangeNStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_GetTimesheetScopeRangeN(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range, int n, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetScopeRangeN", ReplyAction="urn:DataService/Alt_GetTimesheetScopeRangeNResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_GetTimesheetScopeRangeNAsync(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range, int n, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetScopeCustomRange", ReplyAction="urn:DataService/Alt_GetTimesheetScopeCustomRangeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_GetTimesheetScopeCustomRangeStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_GetTimesheetScopeCustomRange(string context, Timesheet.TimesheetService.Scope scope, System.DateTime fromDate, System.DateTime toDate, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetScopeCustomRange", ReplyAction="urn:DataService/Alt_GetTimesheetScopeCustomRangeResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_GetTimesheetScopeCustomRangeAsync(string context, Timesheet.TimesheetService.Scope scope, System.DateTime fromDate, System.DateTime toDate, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetScopeIdCustomRange", ReplyAction="urn:DataService/Alt_GetTimesheetScopeIdCustomRangeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_GetTimesheetScopeIdCustomRangeStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_GetTimesheetScopeIdCustomRange(string context, Timesheet.TimesheetService.Scope scope, int id, System.DateTime fromDate, System.DateTime toDate, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetScopeIdCustomRange", ReplyAction="urn:DataService/Alt_GetTimesheetScopeIdCustomRangeResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_GetTimesheetScopeIdCustomRangeAsync(string context, Timesheet.TimesheetService.Scope scope, int id, System.DateTime fromDate, System.DateTime toDate, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetWithErrors", ReplyAction="urn:DataService/Alt_GetTimesheetWithErrorsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_GetTimesheetWithErrorsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_GetTimesheetWithErrors(string context, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetWithErrors", ReplyAction="urn:DataService/Alt_GetTimesheetWithErrorsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_GetTimesheetWithErrorsAsync(string context, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetToCorrect", ReplyAction="urn:DataService/Alt_GetTimesheetToCorrectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_GetTimesheetToCorrectStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_GetTimesheetToCorrect(string context, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_GetTimesheetToCorrect", ReplyAction="urn:DataService/Alt_GetTimesheetToCorrectResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_GetTimesheetToCorrectAsync(string context, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate, string[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_DeleteRecords", ReplyAction="urn:DataService/Alt_DeleteRecordsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_DeleteRecordsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_DeleteRecordsResponse Alt_DeleteRecords(Timesheet.TimesheetService.Alt_DeleteRecordsRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_DeleteRecords", ReplyAction="urn:DataService/Alt_DeleteRecordsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_DeleteRecordsResponse> Alt_DeleteRecordsAsync(Timesheet.TimesheetService.Alt_DeleteRecordsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ChangeLocation", ReplyAction="urn:DataService/Alt_ChangeLocationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_ChangeLocationStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_ChangeLocationResponse Alt_ChangeLocation(Timesheet.TimesheetService.Alt_ChangeLocationRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ChangeLocation", ReplyAction="urn:DataService/Alt_ChangeLocationResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ChangeLocationResponse> Alt_ChangeLocationAsync(Timesheet.TimesheetService.Alt_ChangeLocationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ChangeCreativeStatus", ReplyAction="urn:DataService/Alt_ChangeCreativeStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_ChangeCreativeStatusStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_ChangeCreativeStatusResponse Alt_ChangeCreativeStatus(Timesheet.TimesheetService.Alt_ChangeCreativeStatusRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ChangeCreativeStatus", ReplyAction="urn:DataService/Alt_ChangeCreativeStatusResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ChangeCreativeStatusResponse> Alt_ChangeCreativeStatusAsync(Timesheet.TimesheetService.Alt_ChangeCreativeStatusRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ChangeComment", ReplyAction="urn:DataService/Alt_ChangeCommentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_ChangeCommentStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_ChangeCommentResponse Alt_ChangeComment(Timesheet.TimesheetService.Alt_ChangeCommentRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ChangeComment", ReplyAction="urn:DataService/Alt_ChangeCommentResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ChangeCommentResponse> Alt_ChangeCommentAsync(Timesheet.TimesheetService.Alt_ChangeCommentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ChangePaymentStatus", ReplyAction="urn:DataService/Alt_ChangePaymentStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_ChangePaymentStatusStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_ChangePaymentStatusResponse Alt_ChangePaymentStatus(Timesheet.TimesheetService.Alt_ChangePaymentStatusRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ChangePaymentStatus", ReplyAction="urn:DataService/Alt_ChangePaymentStatusResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ChangePaymentStatusResponse> Alt_ChangePaymentStatusAsync(Timesheet.TimesheetService.Alt_ChangePaymentStatusRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_Redirect", ReplyAction="urn:DataService/Alt_RedirectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_RedirectStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_RedirectResponse Alt_Redirect(Timesheet.TimesheetService.Alt_RedirectRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_Redirect", ReplyAction="urn:DataService/Alt_RedirectResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_RedirectResponse> Alt_RedirectAsync(Timesheet.TimesheetService.Alt_RedirectRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ResendForApproval", ReplyAction="urn:DataService/Alt_ResendForApprovalResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_ResendForApprovalStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_ResendForApprovalResponse Alt_ResendForApproval(Timesheet.TimesheetService.Alt_ResendForApprovalRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ResendForApproval", ReplyAction="urn:DataService/Alt_ResendForApprovalResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ResendForApprovalResponse> Alt_ResendForApprovalAsync(Timesheet.TimesheetService.Alt_ResendForApprovalRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ResendToEmployee", ReplyAction="urn:DataService/Alt_ResendToEmployeeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_ResendToEmployeeStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_ResendToEmployeeResponse Alt_ResendToEmployee(Timesheet.TimesheetService.Alt_ResendToEmployeeRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_ResendToEmployee", ReplyAction="urn:DataService/Alt_ResendToEmployeeResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ResendToEmployeeResponse> Alt_ResendToEmployeeAsync(Timesheet.TimesheetService.Alt_ResendToEmployeeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_Approve", ReplyAction="urn:DataService/Alt_ApproveResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/Alt_ApproveStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Alt_ApproveResponse Alt_Approve(Timesheet.TimesheetService.Alt_ApproveRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Alt_Approve", ReplyAction="urn:DataService/Alt_ApproveResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ApproveResponse> Alt_ApproveAsync(Timesheet.TimesheetService.Alt_ApproveRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetCurrentUser", ReplyAction="urn:DataService/GetCurrentUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetCurrentUserStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.CurrentUser GetCurrentUser(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetCurrentUser", ReplyAction="urn:DataService/GetCurrentUserResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.CurrentUser> GetCurrentUserAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetAvailableContexts", ReplyAction="urn:DataService/GetAvailableContextsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetAvailableContextsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        string[] GetAvailableContexts();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetAvailableContexts", ReplyAction="urn:DataService/GetAvailableContextsResponse")]
        System.Threading.Tasks.Task<string[]> GetAvailableContextsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetRecentProjects", ReplyAction="urn:DataService/GetRecentProjectsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetRecentProjectsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Project[] GetRecentProjects(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetRecentProjects", ReplyAction="urn:DataService/GetRecentProjectsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Project[]> GetRecentProjectsAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetRecentLocations", ReplyAction="urn:DataService/GetRecentLocationsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetRecentLocationsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Location[] GetRecentLocations(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetRecentLocations", ReplyAction="urn:DataService/GetRecentLocationsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Location[]> GetRecentLocationsAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetRecentSubprojects", ReplyAction="urn:DataService/GetRecentSubprojectsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetRecentSubprojectsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Subproject[] GetRecentSubprojects(string context, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetRecentSubprojects", ReplyAction="urn:DataService/GetRecentSubprojectsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Subproject[]> GetRecentSubprojectsAsync(string context, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetRecentTasks", ReplyAction="urn:DataService/GetRecentTasksResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetRecentTasksStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Task[] GetRecentTasks(string context, int projectId, int subprojectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetRecentTasks", ReplyAction="urn:DataService/GetRecentTasksResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Task[]> GetRecentTasksAsync(string context, int projectId, int subprojectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetRecentComments", ReplyAction="urn:DataService/GetRecentCommentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetRecentCommentsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        string[] GetRecentComments(string context, int projectId, int subprojectId, int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetRecentComments", ReplyAction="urn:DataService/GetRecentCommentsResponse")]
        System.Threading.Tasks.Task<string[]> GetRecentCommentsAsync(string context, int projectId, int subprojectId, int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetScopeRange", ReplyAction="urn:DataService/GetTimesheetScopeRangeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetTimesheetScopeRangeStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetScopeRange(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetScopeRange", ReplyAction="urn:DataService/GetTimesheetScopeRangeResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetScopeRangeAsync(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetTest", ReplyAction="urn:DataService/GetTimesheetTestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetTimesheetTestStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetTest(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetTest", ReplyAction="urn:DataService/GetTimesheetTestResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetTestAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetScopeIdRangeN", ReplyAction="urn:DataService/GetTimesheetScopeIdRangeNResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetTimesheetScopeIdRangeNStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetScopeIdRangeN(string context, Timesheet.TimesheetService.Scope scope, int id, Timesheet.TimesheetService.Range range, int n);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetScopeIdRangeN", ReplyAction="urn:DataService/GetTimesheetScopeIdRangeNResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetScopeIdRangeNAsync(string context, Timesheet.TimesheetService.Scope scope, int id, Timesheet.TimesheetService.Range range, int n);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetScopeIdRange", ReplyAction="urn:DataService/GetTimesheetScopeIdRangeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetTimesheetScopeIdRangeStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetScopeIdRange(string context, Timesheet.TimesheetService.Scope scope, int id, Timesheet.TimesheetService.Range range);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetScopeIdRange", ReplyAction="urn:DataService/GetTimesheetScopeIdRangeResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetScopeIdRangeAsync(string context, Timesheet.TimesheetService.Scope scope, int id, Timesheet.TimesheetService.Range range);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetScopeRangeN", ReplyAction="urn:DataService/GetTimesheetScopeRangeNResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetTimesheetScopeRangeNStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetScopeRangeN(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range, int n);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetScopeRangeN", ReplyAction="urn:DataService/GetTimesheetScopeRangeNResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetScopeRangeNAsync(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range, int n);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetScopeCustomRange", ReplyAction="urn:DataService/GetTimesheetScopeCustomRangeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetTimesheetScopeCustomRangeStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetScopeCustomRange(string context, Timesheet.TimesheetService.Scope scope, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetScopeCustomRange", ReplyAction="urn:DataService/GetTimesheetScopeCustomRangeResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetScopeCustomRangeAsync(string context, Timesheet.TimesheetService.Scope scope, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetScopeIdCustomRange", ReplyAction="urn:DataService/GetTimesheetScopeIdCustomRangeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetTimesheetScopeIdCustomRangeStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetScopeIdCustomRange(string context, Timesheet.TimesheetService.Scope scope, int id, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetScopeIdCustomRange", ReplyAction="urn:DataService/GetTimesheetScopeIdCustomRangeResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetScopeIdCustomRangeAsync(string context, Timesheet.TimesheetService.Scope scope, int id, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetWithErrors", ReplyAction="urn:DataService/GetTimesheetWithErrorsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetTimesheetWithErrorsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetWithErrors(string context, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetWithErrors", ReplyAction="urn:DataService/GetTimesheetWithErrorsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetWithErrorsAsync(string context, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetToCorrect", ReplyAction="urn:DataService/GetTimesheetToCorrectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetTimesheetToCorrectStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetToCorrect(string context, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetToCorrect", ReplyAction="urn:DataService/GetTimesheetToCorrectResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetToCorrectAsync(string context, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetPendingItemsCount", ReplyAction="urn:DataService/GetPendingItemsCountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetPendingItemsCountStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        int GetPendingItemsCount(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetPendingItemsCount", ReplyAction="urn:DataService/GetPendingItemsCountResponse")]
        System.Threading.Tasks.Task<int> GetPendingItemsCountAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetForMyApprovalCount", ReplyAction="urn:DataService/GetForMyApprovalCountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetForMyApprovalCountStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        int GetForMyApprovalCount(string context, Timesheet.TimesheetService.Range range);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetForMyApprovalCount", ReplyAction="urn:DataService/GetForMyApprovalCountResponse")]
        System.Threading.Tasks.Task<int> GetForMyApprovalCountAsync(string context, Timesheet.TimesheetService.Range range);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetCreativeStatuses", ReplyAction="urn:DataService/GetCreativeStatusesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetCreativeStatusesStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.CreativeStatus[] GetCreativeStatuses(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetCreativeStatuses", ReplyAction="urn:DataService/GetCreativeStatusesResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.CreativeStatus[]> GetCreativeStatusesAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjects", ReplyAction="urn:DataService/GetProjectsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetProjectsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Project[] GetProjects(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjects", ReplyAction="urn:DataService/GetProjectsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Project[]> GetProjectsAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectsInfo", ReplyAction="urn:DataService/GetProjectsInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetProjectsInfoStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.ProjectInfo[] GetProjectsInfo(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectsInfo", ReplyAction="urn:DataService/GetProjectsInfoResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.ProjectInfo[]> GetProjectsInfoAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetPersons", ReplyAction="urn:DataService/GetPersonsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetPersonsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Person[] GetPersons(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetPersons", ReplyAction="urn:DataService/GetPersonsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetPersonsAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetPersons", ReplyAction="urn:DataService/GetTimesheetPersonsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetTimesheetPersonsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Person[] GetTimesheetPersons(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetTimesheetPersons", ReplyAction="urn:DataService/GetTimesheetPersonsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetTimesheetPersonsAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetAllTimesheeters", ReplyAction="urn:DataService/GetAllTimesheetersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetAllTimesheetersStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Person[] GetAllTimesheeters(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetAllTimesheeters", ReplyAction="urn:DataService/GetAllTimesheetersResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetAllTimesheetersAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetAvailableSubprojects", ReplyAction="urn:DataService/GetAvailableSubprojectsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetAvailableSubprojectsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Subproject[] GetAvailableSubprojects(string context, System.Nullable<int> projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetAvailableSubprojects", ReplyAction="urn:DataService/GetAvailableSubprojectsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Subproject[]> GetAvailableSubprojectsAsync(string context, System.Nullable<int> projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetApprovalStatuses", ReplyAction="urn:DataService/GetApprovalStatusesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetApprovalStatusesStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.ApprovalStatus[] GetApprovalStatuses(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetApprovalStatuses", ReplyAction="urn:DataService/GetApprovalStatusesResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.ApprovalStatus[]> GetApprovalStatusesAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetLocationsWithCanBeDeleted", ReplyAction="urn:DataService/GetLocationsWithCanBeDeletedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetLocationsWithCanBeDeletedStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.DeletableLocation[] GetLocationsWithCanBeDeleted(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetLocationsWithCanBeDeleted", ReplyAction="urn:DataService/GetLocationsWithCanBeDeletedResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.DeletableLocation[]> GetLocationsWithCanBeDeletedAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetStatuses", ReplyAction="urn:DataService/GetStatusesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetStatusesStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Status[] GetStatuses(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetStatuses", ReplyAction="urn:DataService/GetStatusesResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Status[]> GetStatusesAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetIsSoldStatuses", ReplyAction="urn:DataService/GetIsSoldStatusesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetIsSoldStatusesStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.IsSoldStatus[] GetIsSoldStatuses(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetIsSoldStatuses", ReplyAction="urn:DataService/GetIsSoldStatusesResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.IsSoldStatus[]> GetIsSoldStatusesAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Approve", ReplyAction="urn:DataService/ApproveResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/ApproveStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetRecord[] Approve(string context, Timesheet.TimesheetService.TimesheetRecord[] records);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Approve", ReplyAction="urn:DataService/ApproveResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> ApproveAsync(string context, Timesheet.TimesheetService.TimesheetRecord[] records);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Paste", ReplyAction="urn:DataService/PasteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/PasteStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetRecord[] Paste(string context, Timesheet.TimesheetService.TimesheetRecord[] list);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/Paste", ReplyAction="urn:DataService/PasteResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> PasteAsync(string context, Timesheet.TimesheetService.TimesheetRecord[] list);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateRows", ReplyAction="urn:DataService/UpdateRowsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/UpdateRowsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetRecord[] UpdateRows(string context, Timesheet.TimesheetService.TimesheetRecord[] list, bool editStatus, bool approve);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateRows", ReplyAction="urn:DataService/UpdateRowsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> UpdateRowsAsync(string context, Timesheet.TimesheetService.TimesheetRecord[] list, bool editStatus, bool approve);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateRow", ReplyAction="urn:DataService/UpdateRowResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/UpdateRowStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetRecord UpdateRow(string context, Timesheet.TimesheetService.TimesheetRecord item, bool editStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/UpdateRow", ReplyAction="urn:DataService/UpdateRowResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord> UpdateRowAsync(string context, Timesheet.TimesheetService.TimesheetRecord item, bool editStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetRow", ReplyAction="urn:DataService/GetRowResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetRowStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetRecord GetRow(string context, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetRow", ReplyAction="urn:DataService/GetRowResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord> GetRowAsync(string context, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetRows", ReplyAction="urn:DataService/GetRowsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetRowsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetRecord[] GetRows(string context, int[] ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetRows", ReplyAction="urn:DataService/GetRowsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetRowsAsync(string context, int[] ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetHistory", ReplyAction="urn:DataService/GetHistoryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetHistoryStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.HistoryRecord[] GetHistory(string context, int timesheetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetHistory", ReplyAction="urn:DataService/GetHistoryResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.HistoryRecord[]> GetHistoryAsync(string context, int timesheetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectHistory", ReplyAction="urn:DataService/GetProjectHistoryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetProjectHistoryStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.ProjectHistoryRecord[] GetProjectHistory(string context, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectHistory", ReplyAction="urn:DataService/GetProjectHistoryResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.ProjectHistoryRecord[]> GetProjectHistoryAsync(string context, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/SplitRows", ReplyAction="urn:DataService/SplitRowsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/SplitRowsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.SplitRowsResponse SplitRows(Timesheet.TimesheetService.SplitRowsRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/SplitRows", ReplyAction="urn:DataService/SplitRowsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.SplitRowsResponse> SplitRowsAsync(Timesheet.TimesheetService.SplitRowsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/InsertRows", ReplyAction="urn:DataService/InsertRowsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/InsertRowsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.TimesheetRecord[] InsertRows(string context, Timesheet.TimesheetService.TimesheetRecord newRecord, int count, bool incrementDays);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/InsertRows", ReplyAction="urn:DataService/InsertRowsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> InsertRowsAsync(string context, Timesheet.TimesheetService.TimesheetRecord newRecord, int count, bool incrementDays);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/DeleteRows", ReplyAction="urn:DataService/DeleteRowsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/DeleteRowsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void DeleteRows(string context, Timesheet.TimesheetService.TimesheetRecord[] toDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/DeleteRows", ReplyAction="urn:DataService/DeleteRowsResponse")]
        System.Threading.Tasks.Task DeleteRowsAsync(string context, Timesheet.TimesheetService.TimesheetRecord[] toDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetAvailableTasks", ReplyAction="urn:DataService/GetAvailableTasksResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetAvailableTasksStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Task[] GetAvailableTasks(string context, System.Nullable<int> projectId, int subprojectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetAvailableTasks", ReplyAction="urn:DataService/GetAvailableTasksResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Task[]> GetAvailableTasksAsync(string context, System.Nullable<int> projectId, int subprojectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/RemoveTasksAssignment", ReplyAction="urn:DataService/RemoveTasksAssignmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/RemoveTasksAssignmentStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void RemoveTasksAssignment(string context, int[] projectIds, int[] subprojectIds, int[] taskIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/RemoveTasksAssignment", ReplyAction="urn:DataService/RemoveTasksAssignmentResponse")]
        System.Threading.Tasks.Task RemoveTasksAssignmentAsync(string context, int[] projectIds, int[] subprojectIds, int[] taskIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/RemoveSubprojectsAssignment", ReplyAction="urn:DataService/RemoveSubprojectsAssignmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/RemoveSubprojectsAssignmentStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void RemoveSubprojectsAssignment(string context, int[] projectIds, int[] subprojectIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/RemoveSubprojectsAssignment", ReplyAction="urn:DataService/RemoveSubprojectsAssignmentResponse")]
        System.Threading.Tasks.Task RemoveSubprojectsAssignmentAsync(string context, int[] projectIds, int[] subprojectIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/RemoveSubprojects", ReplyAction="urn:DataService/RemoveSubprojectsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/RemoveSubprojectsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void RemoveSubprojects(string context, int[] projectIds, int[] subprojectIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/RemoveSubprojects", ReplyAction="urn:DataService/RemoveSubprojectsResponse")]
        System.Threading.Tasks.Task RemoveSubprojectsAsync(string context, int[] projectIds, int[] subprojectIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetGlobalManagers", ReplyAction="urn:DataService/GetGlobalManagersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetGlobalManagersStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Person[] GetGlobalManagers(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetGlobalManagers", ReplyAction="urn:DataService/GetGlobalManagersResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetGlobalManagersAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetAllButGlobalManagers", ReplyAction="urn:DataService/GetAllButGlobalManagersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetAllButGlobalManagersStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.Person[] GetAllButGlobalManagers(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetAllButGlobalManagers", ReplyAction="urn:DataService/GetAllButGlobalManagersResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetAllButGlobalManagersAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/RemoveGlobalManager", ReplyAction="urn:DataService/RemoveGlobalManagerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/RemoveGlobalManagerStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void RemoveGlobalManager(string context, int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/RemoveGlobalManager", ReplyAction="urn:DataService/RemoveGlobalManagerResponse")]
        System.Threading.Tasks.Task RemoveGlobalManagerAsync(string context, int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/RemoveProjectAccountObserver", ReplyAction="urn:DataService/RemoveProjectAccountObserverResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/RemoveProjectAccountObserverStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void RemoveProjectAccountObserver(string context, int personId, int projectAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/RemoveProjectAccountObserver", ReplyAction="urn:DataService/RemoveProjectAccountObserverResponse")]
        System.Threading.Tasks.Task RemoveProjectAccountObserverAsync(string context, int personId, int projectAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/AddProjectAccountObservator", ReplyAction="urn:DataService/AddProjectAccountObservatorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/AddProjectAccountObservatorStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void AddProjectAccountObservator(string context, int personId, int projectAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/AddProjectAccountObservator", ReplyAction="urn:DataService/AddProjectAccountObservatorResponse")]
        System.Threading.Tasks.Task AddProjectAccountObservatorAsync(string context, int personId, int projectAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/AddGlobalManager", ReplyAction="urn:DataService/AddGlobalManagerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/AddGlobalManagerStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        void AddGlobalManager(string context, int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/AddGlobalManager", ReplyAction="urn:DataService/AddGlobalManagerResponse")]
        System.Threading.Tasks.Task AddGlobalManagerAsync(string context, int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectStatuses", ReplyAction="urn:DataService/GetProjectStatusesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetProjectStatusesStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.ProjectStatus[] GetProjectStatuses(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectStatuses", ReplyAction="urn:DataService/GetProjectStatusesResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.ProjectStatus[]> GetProjectStatusesAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectAccounts", ReplyAction="urn:DataService/GetProjectAccountsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetProjectAccountsStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.ProjectAccount[] GetProjectAccounts(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectAccounts", ReplyAction="urn:DataService/GetProjectAccountsResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.ProjectAccount[]> GetProjectAccountsAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectAccountsInfo", ReplyAction="urn:DataService/GetProjectAccountsInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetProjectAccountsInfoStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.ProjectAccountInfo[] GetProjectAccountsInfo(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectAccountsInfo", ReplyAction="urn:DataService/GetProjectAccountsInfoResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.ProjectAccountInfo[]> GetProjectAccountsInfoAsync(string context);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectAccount", ReplyAction="urn:DataService/GetProjectAccountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetProjectAccountStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        Timesheet.TimesheetService.ProjectAccount GetProjectAccount(string context, int projectAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetProjectAccount", ReplyAction="urn:DataService/GetProjectAccountResponse")]
        System.Threading.Tasks.Task<Timesheet.TimesheetService.ProjectAccount> GetProjectAccountAsync(string context, int projectAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/DeleteProject", ReplyAction="urn:DataService/DeleteProjectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/DeleteProjectStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        bool DeleteProject(string context, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/DeleteProject", ReplyAction="urn:DataService/DeleteProjectResponse")]
        System.Threading.Tasks.Task<bool> DeleteProjectAsync(string context, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetActualHours", ReplyAction="urn:DataService/GetActualHoursResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Timesheet.TimesheetService.StandardFault), Action="urn:DataService/GetActualHoursStandardFaultFault", Name="StandardFault", Namespace="http://schemas.datacontract.org/2004/07/DataService")]
        decimal[] GetActualHours(string context, Timesheet.TimesheetService.ProjectTreeNode[] tree, System.Nullable<System.DateTime> referenceDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:DataService/GetActualHours", ReplyAction="urn:DataService/GetActualHoursResponse")]
        System.Threading.Tasks.Task<decimal[]> GetActualHoursAsync(string context, Timesheet.TimesheetService.ProjectTreeNode[] tree, System.Nullable<System.DateTime> referenceDate);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PlanReportGeneration", WrapperNamespace="", IsWrapped=true)]
    public partial class PlanReportGenerationRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string context;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string key;
        
        public PlanReportGenerationRequest() {
        }
        
        public PlanReportGenerationRequest(string context, string key) {
            this.context = context;
            this.key = key;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PlanReportGenerationResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class PlanReportGenerationResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string PlanReportGenerationResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int hour;
        
        public PlanReportGenerationResponse() {
        }
        
        public PlanReportGenerationResponse(string PlanReportGenerationResult, int hour) {
            this.PlanReportGenerationResult = PlanReportGenerationResult;
            this.hour = hour;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetProjectAccountStatusesData", WrapperNamespace="", IsWrapped=true)]
    public partial class GetProjectAccountStatusesDataRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string context;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public System.DateTime minDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public System.DateTime maxDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public Timesheet.TimesheetService.Scope scope;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public System.Nullable<int> id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=5)]
        public bool openStatuses;
        
        public GetProjectAccountStatusesDataRequest() {
        }
        
        public GetProjectAccountStatusesDataRequest(string context, System.DateTime minDate, System.DateTime maxDate, Timesheet.TimesheetService.Scope scope, System.Nullable<int> id, bool openStatuses) {
            this.context = context;
            this.minDate = minDate;
            this.maxDate = maxDate;
            this.scope = scope;
            this.id = id;
            this.openStatuses = openStatuses;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetProjectAccountStatusesDataResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class GetProjectAccountStatusesDataResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public Timesheet.TimesheetService.ProjectAccountStatuses[] GetProjectAccountStatusesDataResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public Timesheet.TimesheetService.Status[] statuses;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public Timesheet.TimesheetService.ProjectAccount[] accounts;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public Timesheet.TimesheetService.ApprovalStatus[] approvalStatuses;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public Timesheet.TimesheetService.CurrentUser currentUser;
        
        public GetProjectAccountStatusesDataResponse() {
        }
        
        public GetProjectAccountStatusesDataResponse(Timesheet.TimesheetService.ProjectAccountStatuses[] GetProjectAccountStatusesDataResult, Timesheet.TimesheetService.Status[] statuses, Timesheet.TimesheetService.ProjectAccount[] accounts, Timesheet.TimesheetService.ApprovalStatus[] approvalStatuses, Timesheet.TimesheetService.CurrentUser currentUser) {
            this.GetProjectAccountStatusesDataResult = GetProjectAccountStatusesDataResult;
            this.statuses = statuses;
            this.accounts = accounts;
            this.approvalStatuses = approvalStatuses;
            this.currentUser = currentUser;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_SplitRecord", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_SplitRecordRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string context;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public Timesheet.TimesheetService.TimesheetRecord oldRecord;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public Timesheet.TimesheetService.TimesheetRecord newRecord;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public string newSubprojectName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public string newTaskName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=5)]
        public Timesheet.TimesheetService.Alt_TimesheetRecord updated;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=6)]
        public Timesheet.TimesheetService.Alt_TimesheetRecord inserted;
        
        public Alt_SplitRecordRequest() {
        }
        
        public Alt_SplitRecordRequest(string context, Timesheet.TimesheetService.TimesheetRecord oldRecord, Timesheet.TimesheetService.TimesheetRecord newRecord, string newSubprojectName, string newTaskName, Timesheet.TimesheetService.Alt_TimesheetRecord updated, Timesheet.TimesheetService.Alt_TimesheetRecord inserted) {
            this.context = context;
            this.oldRecord = oldRecord;
            this.newRecord = newRecord;
            this.newSubprojectName = newSubprojectName;
            this.newTaskName = newTaskName;
            this.updated = updated;
            this.inserted = inserted;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_SplitRecordResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_SplitRecordResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public Timesheet.TimesheetService.Alt_TimesheetRecord updated;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public Timesheet.TimesheetService.Alt_TimesheetRecord inserted;
        
        public Alt_SplitRecordResponse() {
        }
        
        public Alt_SplitRecordResponse(Timesheet.TimesheetService.Alt_TimesheetRecord updated, Timesheet.TimesheetService.Alt_TimesheetRecord inserted) {
            this.updated = updated;
            this.inserted = inserted;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ChangeSubproject", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ChangeSubprojectRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string context;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public Timesheet.TimesheetService.Alt_Project project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public Timesheet.TimesheetService.Subproject subproject;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public Timesheet.TimesheetService.Task task;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=5)]
        public bool skip;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=6)]
        public bool change;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=7)]
        public Timesheet.TimesheetService.Status status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=8)]
        public string comment;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=9)]
        public bool clearSubprojects;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=10)]
        public bool clearTasks;
        
        public Alt_ChangeSubprojectRequest() {
        }
        
        public Alt_ChangeSubprojectRequest(string context, int[] ids, Timesheet.TimesheetService.Alt_Project project, Timesheet.TimesheetService.Subproject subproject, Timesheet.TimesheetService.Task task, bool skip, bool change, Timesheet.TimesheetService.Status status, string comment, bool clearSubprojects, bool clearTasks) {
            this.context = context;
            this.ids = ids;
            this.project = project;
            this.subproject = subproject;
            this.task = task;
            this.skip = skip;
            this.change = change;
            this.status = status;
            this.comment = comment;
            this.clearSubprojects = clearSubprojects;
            this.clearTasks = clearTasks;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ChangeSubprojectResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ChangeSubprojectResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public int[] Alt_ChangeSubprojectResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public Timesheet.TimesheetService.Subproject subproject;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public Timesheet.TimesheetService.Task task;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public bool skip;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=5)]
        public bool change;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=6)]
        public Timesheet.TimesheetService.Status status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=7)]
        public string comment;
        
        public Alt_ChangeSubprojectResponse() {
        }
        
        public Alt_ChangeSubprojectResponse(int[] Alt_ChangeSubprojectResult, int[] ids, Timesheet.TimesheetService.Subproject subproject, Timesheet.TimesheetService.Task task, bool skip, bool change, Timesheet.TimesheetService.Status status, string comment) {
            this.Alt_ChangeSubprojectResult = Alt_ChangeSubprojectResult;
            this.ids = ids;
            this.subproject = subproject;
            this.task = task;
            this.skip = skip;
            this.change = change;
            this.status = status;
            this.comment = comment;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ChangeProject", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ChangeProjectRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string context;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public Timesheet.TimesheetService.Alt_Project project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public Timesheet.TimesheetService.Subproject subproject;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public Timesheet.TimesheetService.Task task;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=5)]
        public bool skipTasks;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=6)]
        public bool skipSubprojects;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=7)]
        public bool changeTask;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=8)]
        public bool changeSubproject;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=9)]
        public Timesheet.TimesheetService.Status status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=10)]
        public string comment;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=11)]
        public bool clearSubproject;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=12)]
        public bool clearTasks;
        
        public Alt_ChangeProjectRequest() {
        }
        
        public Alt_ChangeProjectRequest(string context, int[] ids, Timesheet.TimesheetService.Alt_Project project, Timesheet.TimesheetService.Subproject subproject, Timesheet.TimesheetService.Task task, bool skipTasks, bool skipSubprojects, bool changeTask, bool changeSubproject, Timesheet.TimesheetService.Status status, string comment, bool clearSubproject, bool clearTasks) {
            this.context = context;
            this.ids = ids;
            this.project = project;
            this.subproject = subproject;
            this.task = task;
            this.skipTasks = skipTasks;
            this.skipSubprojects = skipSubprojects;
            this.changeTask = changeTask;
            this.changeSubproject = changeSubproject;
            this.status = status;
            this.comment = comment;
            this.clearSubproject = clearSubproject;
            this.clearTasks = clearTasks;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ChangeProjectResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ChangeProjectResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public int[] Alt_ChangeProjectResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public Timesheet.TimesheetService.Alt_Project project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public Timesheet.TimesheetService.Subproject subproject;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public Timesheet.TimesheetService.Task task;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=5)]
        public bool skipTasks;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=6)]
        public bool skipSubprojects;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=7)]
        public bool changeTask;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=8)]
        public bool changeSubproject;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=9)]
        public Timesheet.TimesheetService.Status status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=10)]
        public string comment;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=11)]
        public System.Collections.Generic.Dictionary<int, string> approvedBy;
        
        public Alt_ChangeProjectResponse() {
        }
        
        public Alt_ChangeProjectResponse(int[] Alt_ChangeProjectResult, int[] ids, Timesheet.TimesheetService.Alt_Project project, Timesheet.TimesheetService.Subproject subproject, Timesheet.TimesheetService.Task task, bool skipTasks, bool skipSubprojects, bool changeTask, bool changeSubproject, Timesheet.TimesheetService.Status status, string comment, System.Collections.Generic.Dictionary<int, string> approvedBy) {
            this.Alt_ChangeProjectResult = Alt_ChangeProjectResult;
            this.ids = ids;
            this.project = project;
            this.subproject = subproject;
            this.task = task;
            this.skipTasks = skipTasks;
            this.skipSubprojects = skipSubprojects;
            this.changeTask = changeTask;
            this.changeSubproject = changeSubproject;
            this.status = status;
            this.comment = comment;
            this.approvedBy = approvedBy;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ChangeTask", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ChangeTaskRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string context;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public Timesheet.TimesheetService.Alt_Project project;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public int subprojectId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public Timesheet.TimesheetService.Task task;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=5)]
        public Timesheet.TimesheetService.Status status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=6)]
        public string comment;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=7)]
        public bool clearTasks;
        
        public Alt_ChangeTaskRequest() {
        }
        
        public Alt_ChangeTaskRequest(string context, int[] ids, Timesheet.TimesheetService.Alt_Project project, int subprojectId, Timesheet.TimesheetService.Task task, Timesheet.TimesheetService.Status status, string comment, bool clearTasks) {
            this.context = context;
            this.ids = ids;
            this.project = project;
            this.subprojectId = subprojectId;
            this.task = task;
            this.status = status;
            this.comment = comment;
            this.clearTasks = clearTasks;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ChangeTaskResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ChangeTaskResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public Timesheet.TimesheetService.Task task;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public Timesheet.TimesheetService.Status status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public string comment;
        
        public Alt_ChangeTaskResponse() {
        }
        
        public Alt_ChangeTaskResponse(int[] ids, Timesheet.TimesheetService.Task task, Timesheet.TimesheetService.Status status, string comment) {
            this.ids = ids;
            this.task = task;
            this.status = status;
            this.comment = comment;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ChangeStatus", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ChangeStatusRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string context;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public Timesheet.TimesheetService.Status status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public bool isSold;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public string saleMonth;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=5)]
        public string paymentStatus;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=6)]
        public int[] toApprove;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=7)]
        public Timesheet.TimesheetService.Person approvedBy;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=8)]
        public string approvalNote;
        
        public Alt_ChangeStatusRequest() {
        }
        
        public Alt_ChangeStatusRequest(string context, int[] ids, Timesheet.TimesheetService.Status status, bool isSold, string saleMonth, string paymentStatus, int[] toApprove, Timesheet.TimesheetService.Person approvedBy, string approvalNote) {
            this.context = context;
            this.ids = ids;
            this.status = status;
            this.isSold = isSold;
            this.saleMonth = saleMonth;
            this.paymentStatus = paymentStatus;
            this.toApprove = toApprove;
            this.approvedBy = approvedBy;
            this.approvalNote = approvalNote;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ChangeStatusResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ChangeStatusResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_ChangeStatusResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public Timesheet.TimesheetService.Status status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public bool isSold;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public string saleMonth;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=5)]
        public string paymentStatus;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=6)]
        public int[] toApprove;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=7)]
        public Timesheet.TimesheetService.Person approvedBy;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=8)]
        public string approvalNote;
        
        public Alt_ChangeStatusResponse() {
        }
        
        public Alt_ChangeStatusResponse(Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_ChangeStatusResult, int[] ids, Timesheet.TimesheetService.Status status, bool isSold, string saleMonth, string paymentStatus, int[] toApprove, Timesheet.TimesheetService.Person approvedBy, string approvalNote) {
            this.Alt_ChangeStatusResult = Alt_ChangeStatusResult;
            this.ids = ids;
            this.status = status;
            this.isSold = isSold;
            this.saleMonth = saleMonth;
            this.paymentStatus = paymentStatus;
            this.toApprove = toApprove;
            this.approvedBy = approvedBy;
            this.approvalNote = approvalNote;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_DeleteRecords", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_DeleteRecordsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string context;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int[] ids;
        
        public Alt_DeleteRecordsRequest() {
        }
        
        public Alt_DeleteRecordsRequest(string context, int[] ids) {
            this.context = context;
            this.ids = ids;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_DeleteRecordsResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_DeleteRecordsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public int[] ids;
        
        public Alt_DeleteRecordsResponse() {
        }
        
        public Alt_DeleteRecordsResponse(int[] ids) {
            this.ids = ids;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ChangeLocation", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ChangeLocationRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string context;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public Timesheet.TimesheetService.Location location;
        
        public Alt_ChangeLocationRequest() {
        }
        
        public Alt_ChangeLocationRequest(string context, int[] ids, Timesheet.TimesheetService.Location location) {
            this.context = context;
            this.ids = ids;
            this.location = location;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ChangeLocationResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ChangeLocationResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public Timesheet.TimesheetService.Location location;
        
        public Alt_ChangeLocationResponse() {
        }
        
        public Alt_ChangeLocationResponse(int[] ids, Timesheet.TimesheetService.Location location) {
            this.ids = ids;
            this.location = location;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ChangeCreativeStatus", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ChangeCreativeStatusRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string context;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public Timesheet.TimesheetService.CreativeStatus status;
        
        public Alt_ChangeCreativeStatusRequest() {
        }
        
        public Alt_ChangeCreativeStatusRequest(string context, int[] ids, Timesheet.TimesheetService.CreativeStatus status) {
            this.context = context;
            this.ids = ids;
            this.status = status;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ChangeCreativeStatusResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ChangeCreativeStatusResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public Timesheet.TimesheetService.CreativeStatus status;
        
        public Alt_ChangeCreativeStatusResponse() {
        }
        
        public Alt_ChangeCreativeStatusResponse(int[] ids, Timesheet.TimesheetService.CreativeStatus status) {
            this.ids = ids;
            this.status = status;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ChangeComment", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ChangeCommentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string context;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public string comment;
        
        public Alt_ChangeCommentRequest() {
        }
        
        public Alt_ChangeCommentRequest(string context, int[] ids, string comment) {
            this.context = context;
            this.ids = ids;
            this.comment = comment;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ChangeCommentResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ChangeCommentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string comment;
        
        public Alt_ChangeCommentResponse() {
        }
        
        public Alt_ChangeCommentResponse(int[] ids, string comment) {
            this.ids = ids;
            this.comment = comment;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ChangePaymentStatus", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ChangePaymentStatusRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string context;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public string paymentStatus;
        
        public Alt_ChangePaymentStatusRequest() {
        }
        
        public Alt_ChangePaymentStatusRequest(string context, int[] ids, string paymentStatus) {
            this.context = context;
            this.ids = ids;
            this.paymentStatus = paymentStatus;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ChangePaymentStatusResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ChangePaymentStatusResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string paymentStatus;
        
        public Alt_ChangePaymentStatusResponse() {
        }
        
        public Alt_ChangePaymentStatusResponse(int[] ids, string paymentStatus) {
            this.ids = ids;
            this.paymentStatus = paymentStatus;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_Redirect", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_RedirectRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string context;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public Timesheet.TimesheetService.Person person;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public string approvalNote;
        
        public Alt_RedirectRequest() {
        }
        
        public Alt_RedirectRequest(string context, int[] ids, Timesheet.TimesheetService.Person person, string approvalNote) {
            this.context = context;
            this.ids = ids;
            this.person = person;
            this.approvalNote = approvalNote;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_RedirectResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_RedirectResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public Timesheet.TimesheetService.Person person;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public string approvalNote;
        
        public Alt_RedirectResponse() {
        }
        
        public Alt_RedirectResponse(int[] ids, Timesheet.TimesheetService.Person person, string approvalNote) {
            this.ids = ids;
            this.person = person;
            this.approvalNote = approvalNote;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ResendForApproval", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ResendForApprovalRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string context;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public string approvalNote;
        
        public Alt_ResendForApprovalRequest() {
        }
        
        public Alt_ResendForApprovalRequest(string context, int[] ids, string approvalNote) {
            this.context = context;
            this.ids = ids;
            this.approvalNote = approvalNote;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ResendForApprovalResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ResendForApprovalResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string approvalNote;
        
        public Alt_ResendForApprovalResponse() {
        }
        
        public Alt_ResendForApprovalResponse(int[] ids, string approvalNote) {
            this.ids = ids;
            this.approvalNote = approvalNote;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ResendToEmployee", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ResendToEmployeeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string context;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public string approvalNote;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public Timesheet.TimesheetService.Person approvedBy;
        
        public Alt_ResendToEmployeeRequest() {
        }
        
        public Alt_ResendToEmployeeRequest(string context, int[] ids, string approvalNote, Timesheet.TimesheetService.Person approvedBy) {
            this.context = context;
            this.ids = ids;
            this.approvalNote = approvalNote;
            this.approvedBy = approvedBy;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ResendToEmployeeResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ResendToEmployeeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string approvalNote;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public Timesheet.TimesheetService.Person approvedBy;
        
        public Alt_ResendToEmployeeResponse() {
        }
        
        public Alt_ResendToEmployeeResponse(int[] ids, string approvalNote, Timesheet.TimesheetService.Person approvedBy) {
            this.ids = ids;
            this.approvalNote = approvalNote;
            this.approvedBy = approvedBy;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_Approve", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ApproveRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string context;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public Timesheet.TimesheetService.ApprovalStatus status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public string approvalNote;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public Timesheet.TimesheetService.Person approvedBy;
        
        public Alt_ApproveRequest() {
        }
        
        public Alt_ApproveRequest(string context, Timesheet.TimesheetService.ApprovalStatus status, string approvalNote, int[] ids, Timesheet.TimesheetService.Person approvedBy) {
            this.context = context;
            this.status = status;
            this.approvalNote = approvalNote;
            this.ids = ids;
            this.approvedBy = approvedBy;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Alt_ApproveResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class Alt_ApproveResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public Timesheet.TimesheetService.ApprovalStatus status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string approvalNote;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public int[] ids;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public Timesheet.TimesheetService.Person approvedBy;
        
        public Alt_ApproveResponse() {
        }
        
        public Alt_ApproveResponse(Timesheet.TimesheetService.ApprovalStatus status, string approvalNote, int[] ids, Timesheet.TimesheetService.Person approvedBy) {
            this.status = status;
            this.approvalNote = approvalNote;
            this.ids = ids;
            this.approvedBy = approvedBy;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SplitRows", WrapperNamespace="", IsWrapped=true)]
    public partial class SplitRowsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string context;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public Timesheet.TimesheetService.TimesheetRecord oldRecord;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public Timesheet.TimesheetService.TimesheetRecord newRecord;
        
        public SplitRowsRequest() {
        }
        
        public SplitRowsRequest(string context, Timesheet.TimesheetService.TimesheetRecord oldRecord, Timesheet.TimesheetService.TimesheetRecord newRecord) {
            this.context = context;
            this.oldRecord = oldRecord;
            this.newRecord = newRecord;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SplitRowsResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class SplitRowsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public Timesheet.TimesheetService.TimesheetRecord oldRecord;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public Timesheet.TimesheetService.TimesheetRecord newRecord;
        
        public SplitRowsResponse() {
        }
        
        public SplitRowsResponse(Timesheet.TimesheetService.TimesheetRecord oldRecord, Timesheet.TimesheetService.TimesheetRecord newRecord) {
            this.oldRecord = oldRecord;
            this.newRecord = newRecord;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DataServiceChannel : Timesheet.TimesheetService.DataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataServiceClient : System.ServiceModel.ClientBase<Timesheet.TimesheetService.DataService>, Timesheet.TimesheetService.DataService {
        
        public DataServiceClient() {
        }
        
        public DataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Timesheet.TimesheetService.ProjectTreeNode[] GetProjectTree(string context, Timesheet.TimesheetService.Project project) {
            return base.Channel.GetProjectTree(context, project);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.ProjectTreeNode[]> GetProjectTreeAsync(string context, Timesheet.TimesheetService.Project project) {
            return base.Channel.GetProjectTreeAsync(context, project);
        }
        
        public void UpdateProjectsGridData(string context, Timesheet.TimesheetService.Project[] projects) {
            base.Channel.UpdateProjectsGridData(context, projects);
        }
        
        public System.Threading.Tasks.Task UpdateProjectsGridDataAsync(string context, Timesheet.TimesheetService.Project[] projects) {
            return base.Channel.UpdateProjectsGridDataAsync(context, projects);
        }
        
        public Timesheet.TimesheetService.Project CreateProject(string context, Timesheet.TimesheetService.Project project, Timesheet.TimesheetService.Client client, Timesheet.TimesheetService.ProjectAccount account) {
            return base.Channel.CreateProject(context, project, client, account);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Project> CreateProjectAsync(string context, Timesheet.TimesheetService.Project project, Timesheet.TimesheetService.Client client, Timesheet.TimesheetService.ProjectAccount account) {
            return base.Channel.CreateProjectAsync(context, project, client, account);
        }
        
        public int ModifyProjectTree(string context, Timesheet.TimesheetService.Project project, Timesheet.TimesheetService.ProjectTreeNode projectNode, Timesheet.TimesheetService.ProjectTreeNode[] subprojectNodesToUpdate, System.Collections.Generic.Dictionary<Timesheet.TimesheetService.ProjectTreeNode, Timesheet.TimesheetService.ProjectTreeNode> taskNodesToUpdate, int[] subprojectsToDeleteIds, System.Collections.Generic.Dictionary<Timesheet.TimesheetService.ProjectTreeNode, Timesheet.TimesheetService.ProjectTreeNode> taskNodesTaskSubprojectNodes, System.Collections.Generic.Dictionary<Timesheet.TimesheetService.ProjectTreeNode, Timesheet.TimesheetService.SubprojectNewTask> tasksToMoveRecordsFrom, Timesheet.TimesheetService.ConfirmationDate[] dates) {
            return base.Channel.ModifyProjectTree(context, project, projectNode, subprojectNodesToUpdate, taskNodesToUpdate, subprojectsToDeleteIds, taskNodesTaskSubprojectNodes, tasksToMoveRecordsFrom, dates);
        }
        
        public System.Threading.Tasks.Task<int> ModifyProjectTreeAsync(string context, Timesheet.TimesheetService.Project project, Timesheet.TimesheetService.ProjectTreeNode projectNode, Timesheet.TimesheetService.ProjectTreeNode[] subprojectNodesToUpdate, System.Collections.Generic.Dictionary<Timesheet.TimesheetService.ProjectTreeNode, Timesheet.TimesheetService.ProjectTreeNode> taskNodesToUpdate, int[] subprojectsToDeleteIds, System.Collections.Generic.Dictionary<Timesheet.TimesheetService.ProjectTreeNode, Timesheet.TimesheetService.ProjectTreeNode> taskNodesTaskSubprojectNodes, System.Collections.Generic.Dictionary<Timesheet.TimesheetService.ProjectTreeNode, Timesheet.TimesheetService.SubprojectNewTask> tasksToMoveRecordsFrom, Timesheet.TimesheetService.ConfirmationDate[] dates) {
            return base.Channel.ModifyProjectTreeAsync(context, project, projectNode, subprojectNodesToUpdate, taskNodesToUpdate, subprojectsToDeleteIds, taskNodesTaskSubprojectNodes, tasksToMoveRecordsFrom, dates);
        }
        
        public Timesheet.TimesheetService.Person[] GetProjectObservers(string context, int projectId) {
            return base.Channel.GetProjectObservers(context, projectId);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetProjectObserversAsync(string context, int projectId) {
            return base.Channel.GetProjectObserversAsync(context, projectId);
        }
        
        public Timesheet.TimesheetService.Person[] GetProjectAccountObservers(string context, int projectAccountId) {
            return base.Channel.GetProjectAccountObservers(context, projectAccountId);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetProjectAccountObserversAsync(string context, int projectAccountId) {
            return base.Channel.GetProjectAccountObserversAsync(context, projectAccountId);
        }
        
        public Timesheet.TimesheetService.Client[] GetClients(string context) {
            return base.Channel.GetClients(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Client[]> GetClientsAsync(string context) {
            return base.Channel.GetClientsAsync(context);
        }
        
        public Timesheet.TimesheetService.Client GetClient(string context, int clientId) {
            return base.Channel.GetClient(context, clientId);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Client> GetClientAsync(string context, int clientId) {
            return base.Channel.GetClientAsync(context, clientId);
        }
        
        public bool DeleteClient(string context, int clientId) {
            return base.Channel.DeleteClient(context, clientId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteClientAsync(string context, int clientId) {
            return base.Channel.DeleteClientAsync(context, clientId);
        }
        
        public int CreateClient(string context, Timesheet.TimesheetService.Client client) {
            return base.Channel.CreateClient(context, client);
        }
        
        public System.Threading.Tasks.Task<int> CreateClientAsync(string context, Timesheet.TimesheetService.Client client) {
            return base.Channel.CreateClientAsync(context, client);
        }
        
        public void UpdateClient(string context, Timesheet.TimesheetService.Client client, bool editProjects) {
            base.Channel.UpdateClient(context, client, editProjects);
        }
        
        public System.Threading.Tasks.Task UpdateClientAsync(string context, Timesheet.TimesheetService.Client client, bool editProjects) {
            return base.Channel.UpdateClientAsync(context, client, editProjects);
        }
        
        public string[] GetAccountProjectNames(string context, int accountId) {
            return base.Channel.GetAccountProjectNames(context, accountId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAccountProjectNamesAsync(string context, int accountId) {
            return base.Channel.GetAccountProjectNamesAsync(context, accountId);
        }
        
        public Timesheet.TimesheetService.Person[] GetAllAccountManagers(string context) {
            return base.Channel.GetAllAccountManagers(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetAllAccountManagersAsync(string context) {
            return base.Channel.GetAllAccountManagersAsync(context);
        }
        
        public Timesheet.TimesheetService.Person[] GetAccountManagers(string context, int accountId) {
            return base.Channel.GetAccountManagers(context, accountId);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetAccountManagersAsync(string context, int accountId) {
            return base.Channel.GetAccountManagersAsync(context, accountId);
        }
        
        public Timesheet.TimesheetService.Person[] GetAccountObservers(string context, int accountId) {
            return base.Channel.GetAccountObservers(context, accountId);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetAccountObserversAsync(string context, int accountId) {
            return base.Channel.GetAccountObserversAsync(context, accountId);
        }
        
        public Timesheet.TimesheetService.ProjectAccount UpdateProjectAccount(string context, Timesheet.TimesheetService.ProjectAccount projectAccount, Timesheet.TimesheetService.ConfirmationDate[] dates) {
            return base.Channel.UpdateProjectAccount(context, projectAccount, dates);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.ProjectAccount> UpdateProjectAccountAsync(string context, Timesheet.TimesheetService.ProjectAccount projectAccount, Timesheet.TimesheetService.ConfirmationDate[] dates) {
            return base.Channel.UpdateProjectAccountAsync(context, projectAccount, dates);
        }
        
        public bool DeleteProjectAccount(string context, int projectAccountId) {
            return base.Channel.DeleteProjectAccount(context, projectAccountId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteProjectAccountAsync(string context, int projectAccountId) {
            return base.Channel.DeleteProjectAccountAsync(context, projectAccountId);
        }
        
        public Timesheet.TimesheetService.Dashboard GetDashboard(string context) {
            return base.Channel.GetDashboard(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Dashboard> GetDashboardAsync(string context) {
            return base.Channel.GetDashboardAsync(context);
        }
        
        public Timesheet.TimesheetService.Summary[] GetSummary(string context, int userId, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.SummaryBy by, System.DateTime dateFrom, System.DateTime dateTo) {
            return base.Channel.GetSummary(context, userId, scope, by, dateFrom, dateTo);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Summary[]> GetSummaryAsync(string context, int userId, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.SummaryBy by, System.DateTime dateFrom, System.DateTime dateTo) {
            return base.Channel.GetSummaryAsync(context, userId, scope, by, dateFrom, dateTo);
        }
        
        public void updateGlobalConfirmationDates(string context, Timesheet.TimesheetService.ConfirmationDate[] dates) {
            base.Channel.updateGlobalConfirmationDates(context, dates);
        }
        
        public System.Threading.Tasks.Task updateGlobalConfirmationDatesAsync(string context, Timesheet.TimesheetService.ConfirmationDate[] dates) {
            return base.Channel.updateGlobalConfirmationDatesAsync(context, dates);
        }
        
        public Timesheet.TimesheetService.ConfirmationDate[] getConfirmationDates(string context, System.Nullable<int> projectAccountId) {
            return base.Channel.getConfirmationDates(context, projectAccountId);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.ConfirmationDate[]> getConfirmationDatesAsync(string context, System.Nullable<int> projectAccountId) {
            return base.Channel.getConfirmationDatesAsync(context, projectAccountId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Timesheet.TimesheetService.PlanReportGenerationResponse Timesheet.TimesheetService.DataService.PlanReportGeneration(Timesheet.TimesheetService.PlanReportGenerationRequest request) {
            return base.Channel.PlanReportGeneration(request);
        }
        
        public string PlanReportGeneration(string context, string key, out int hour) {
            Timesheet.TimesheetService.PlanReportGenerationRequest inValue = new Timesheet.TimesheetService.PlanReportGenerationRequest();
            inValue.context = context;
            inValue.key = key;
            Timesheet.TimesheetService.PlanReportGenerationResponse retVal = ((Timesheet.TimesheetService.DataService)(this)).PlanReportGeneration(inValue);
            hour = retVal.hour;
            return retVal.PlanReportGenerationResult;
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.PlanReportGenerationResponse> PlanReportGenerationAsync(Timesheet.TimesheetService.PlanReportGenerationRequest request) {
            return base.Channel.PlanReportGenerationAsync(request);
        }
        
        public void CloseLastMonth(string context, string month) {
            base.Channel.CloseLastMonth(context, month);
        }
        
        public System.Threading.Tasks.Task CloseLastMonthAsync(string context, string month) {
            return base.Channel.CloseLastMonthAsync(context, month);
        }
        
        public void ClosePreviousYear(string context, string year) {
            base.Channel.ClosePreviousYear(context, year);
        }
        
        public System.Threading.Tasks.Task ClosePreviousYearAsync(string context, string year) {
            return base.Channel.ClosePreviousYearAsync(context, year);
        }
        
        public void UpdateTimesheetSettings(string context, System.Collections.Generic.KeyValuePair<string, string>[] settings) {
            base.Channel.UpdateTimesheetSettings(context, settings);
        }
        
        public System.Threading.Tasks.Task UpdateTimesheetSettingsAsync(string context, System.Collections.Generic.KeyValuePair<string, string>[] settings) {
            return base.Channel.UpdateTimesheetSettingsAsync(context, settings);
        }
        
        public Timesheet.TimesheetService.DeletableLocation[] UpdateLocations(string context, Timesheet.TimesheetService.DeletableLocation[] locations) {
            return base.Channel.UpdateLocations(context, locations);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.DeletableLocation[]> UpdateLocationsAsync(string context, Timesheet.TimesheetService.DeletableLocation[] locations) {
            return base.Channel.UpdateLocationsAsync(context, locations);
        }
        
        public System.Collections.Generic.KeyValuePair<string, string>[] GetTimesheetSettings(string context) {
            return base.Channel.GetTimesheetSettings(context);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, string>[]> GetTimesheetSettingsAsync(string context) {
            return base.Channel.GetTimesheetSettingsAsync(context);
        }
        
        public Timesheet.TimesheetService.Timesheeter[] GetHoursForTimesheeters(string context, Timesheet.TimesheetService.Timesheeter[] timesheeters, System.DateTime m, int n) {
            return base.Channel.GetHoursForTimesheeters(context, timesheeters, m, n);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Timesheeter[]> GetHoursForTimesheetersAsync(string context, Timesheet.TimesheetService.Timesheeter[] timesheeters, System.DateTime m, int n) {
            return base.Channel.GetHoursForTimesheetersAsync(context, timesheeters, m, n);
        }
        
        public Timesheet.TimesheetService.Timesheeter[] GetTimesheeters(string context, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.GetTimesheeters(context, startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Timesheeter[]> GetTimesheetersAsync(string context, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.GetTimesheetersAsync(context, startDate, endDate);
        }
        
        public Timesheet.TimesheetService.SoldHours[] GetSoldHoursDifference(string context, System.DateTime currentMonth) {
            return base.Channel.GetSoldHoursDifference(context, currentMonth);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.SoldHours[]> GetSoldHoursDifferenceAsync(string context, System.DateTime currentMonth) {
            return base.Channel.GetSoldHoursDifferenceAsync(context, currentMonth);
        }
        
        public string[] GetSoldHoursMonths(string context) {
            return base.Channel.GetSoldHoursMonths(context);
        }
        
        public System.Threading.Tasks.Task<string[]> GetSoldHoursMonthsAsync(string context) {
            return base.Channel.GetSoldHoursMonthsAsync(context);
        }
        
        public Timesheet.TimesheetService.CreativeWork[] GetCreativeWorksScopeRange(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range) {
            return base.Channel.GetCreativeWorksScopeRange(context, scope, range);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.CreativeWork[]> GetCreativeWorksScopeRangeAsync(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range) {
            return base.Channel.GetCreativeWorksScopeRangeAsync(context, scope, range);
        }
        
        public Timesheet.TimesheetService.CreativeWork[] GetCreativeWorksScopeMonth(string context, Timesheet.TimesheetService.Scope scope, System.DateTime month) {
            return base.Channel.GetCreativeWorksScopeMonth(context, scope, month);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.CreativeWork[]> GetCreativeWorksScopeMonthAsync(string context, Timesheet.TimesheetService.Scope scope, System.DateTime month) {
            return base.Channel.GetCreativeWorksScopeMonthAsync(context, scope, month);
        }
        
        public Timesheet.TimesheetService.CreativeWork GetCreativeWork(string context, int personId, System.DateTime month) {
            return base.Channel.GetCreativeWork(context, personId, month);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.CreativeWork> GetCreativeWorkAsync(string context, int personId, System.DateTime month) {
            return base.Channel.GetCreativeWorkAsync(context, personId, month);
        }
        
        public Timesheet.TimesheetService.CreativeWork GetUpdatedCreativeWork(string context, Timesheet.TimesheetService.CreativeWork creativeWork) {
            return base.Channel.GetUpdatedCreativeWork(context, creativeWork);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.CreativeWork> GetUpdatedCreativeWorkAsync(string context, Timesheet.TimesheetService.CreativeWork creativeWork) {
            return base.Channel.GetUpdatedCreativeWorkAsync(context, creativeWork);
        }
        
        public void RefreshCreativeWork(string context, int creativeWorkId) {
            base.Channel.RefreshCreativeWork(context, creativeWorkId);
        }
        
        public System.Threading.Tasks.Task RefreshCreativeWorkAsync(string context, int creativeWorkId) {
            return base.Channel.RefreshCreativeWorkAsync(context, creativeWorkId);
        }
        
        public void UpdateComment(string context, int creativeWorkId, string comment) {
            base.Channel.UpdateComment(context, creativeWorkId, comment);
        }
        
        public System.Threading.Tasks.Task UpdateCommentAsync(string context, int creativeWorkId, string comment) {
            return base.Channel.UpdateCommentAsync(context, creativeWorkId, comment);
        }
        
        public void UpdateCreativeWorkItem(string context, Timesheet.TimesheetService.CreativeWorkItem item, int creativeWorkId) {
            base.Channel.UpdateCreativeWorkItem(context, item, creativeWorkId);
        }
        
        public System.Threading.Tasks.Task UpdateCreativeWorkItemAsync(string context, Timesheet.TimesheetService.CreativeWorkItem item, int creativeWorkId) {
            return base.Channel.UpdateCreativeWorkItemAsync(context, item, creativeWorkId);
        }
        
        public bool IsOfficeWorker(string context) {
            return base.Channel.IsOfficeWorker(context);
        }
        
        public System.Threading.Tasks.Task<bool> IsOfficeWorkerAsync(string context) {
            return base.Channel.IsOfficeWorkerAsync(context);
        }
        
        public void GenerateCreativeWorkRecords(string context, System.DateTime month) {
            base.Channel.GenerateCreativeWorkRecords(context, month);
        }
        
        public System.Threading.Tasks.Task GenerateCreativeWorkRecordsAsync(string context, System.DateTime month) {
            return base.Channel.GenerateCreativeWorkRecordsAsync(context, month);
        }
        
        public System.DateTime GetLastMonth() {
            return base.Channel.GetLastMonth();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetLastMonthAsync() {
            return base.Channel.GetLastMonthAsync();
        }
        
        public System.DateTime[] GetMonthsForCreativeWorksReport(string context) {
            return base.Channel.GetMonthsForCreativeWorksReport(context);
        }
        
        public System.Threading.Tasks.Task<System.DateTime[]> GetMonthsForCreativeWorksReportAsync(string context) {
            return base.Channel.GetMonthsForCreativeWorksReportAsync(context);
        }
        
        public System.DateTime[] GetMonthsForPersonsCreativeWorksReport(string context, int personId) {
            return base.Channel.GetMonthsForPersonsCreativeWorksReport(context, personId);
        }
        
        public System.Threading.Tasks.Task<System.DateTime[]> GetMonthsForPersonsCreativeWorksReportAsync(string context, int personId) {
            return base.Channel.GetMonthsForPersonsCreativeWorksReportAsync(context, personId);
        }
        
        public void DeleteCreativeWork(string context, int[] creativeWorkIds) {
            base.Channel.DeleteCreativeWork(context, creativeWorkIds);
        }
        
        public System.Threading.Tasks.Task DeleteCreativeWorkAsync(string context, int[] creativeWorkIds) {
            return base.Channel.DeleteCreativeWorkAsync(context, creativeWorkIds);
        }
        
        public Timesheet.TimesheetService.TimesheetWeekSummary[] GetWeekSummary(string context, System.DateTime date, int weeksCount) {
            return base.Channel.GetWeekSummary(context, date, weeksCount);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetWeekSummary[]> GetWeekSummaryAsync(string context, System.DateTime date, int weeksCount) {
            return base.Channel.GetWeekSummaryAsync(context, date, weeksCount);
        }
        
        public Timesheet.TimesheetService.TimesheetVisualization[] GetWeekVisualization(string context, System.DateTime weekStart) {
            return base.Channel.GetWeekVisualization(context, weekStart);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetVisualization[]> GetWeekVisualizationAsync(string context, System.DateTime weekStart) {
            return base.Channel.GetWeekVisualizationAsync(context, weekStart);
        }
        
        public Timesheet.TimesheetService.Inconsistencies GetInconsistencies() {
            return base.Channel.GetInconsistencies();
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Inconsistencies> GetInconsistenciesAsync() {
            return base.Channel.GetInconsistenciesAsync();
        }
        
        public Timesheet.TimesheetService.TimesheetSummary[] GetSummaryOfInconsistencies(string context, string id, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate) {
            return base.Channel.GetSummaryOfInconsistencies(context, id, range, nOfRange, fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetSummary[]> GetSummaryOfInconsistenciesAsync(string context, string id, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate) {
            return base.Channel.GetSummaryOfInconsistenciesAsync(context, id, range, nOfRange, fromDate, toDate);
        }
        
        public Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetWithInconsistencies(string context, string id, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate, System.Nullable<int> projectId, System.Nullable<int> personId) {
            return base.Channel.GetTimesheetWithInconsistencies(context, id, range, nOfRange, fromDate, toDate, projectId, personId);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetWithInconsistenciesAsync(string context, string id, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate, System.Nullable<int> projectId, System.Nullable<int> personId) {
            return base.Channel.GetTimesheetWithInconsistenciesAsync(context, id, range, nOfRange, fromDate, toDate, projectId, personId);
        }
        
        public bool IsAdministrator(string context) {
            return base.Channel.IsAdministrator(context);
        }
        
        public System.Threading.Tasks.Task<bool> IsAdministratorAsync(string context) {
            return base.Channel.IsAdministratorAsync(context);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Timesheet.TimesheetService.GetProjectAccountStatusesDataResponse Timesheet.TimesheetService.DataService.GetProjectAccountStatusesData(Timesheet.TimesheetService.GetProjectAccountStatusesDataRequest request) {
            return base.Channel.GetProjectAccountStatusesData(request);
        }
        
        public Timesheet.TimesheetService.ProjectAccountStatuses[] GetProjectAccountStatusesData(string context, System.DateTime minDate, System.DateTime maxDate, Timesheet.TimesheetService.Scope scope, System.Nullable<int> id, bool openStatuses, out Timesheet.TimesheetService.Status[] statuses, out Timesheet.TimesheetService.ProjectAccount[] accounts, out Timesheet.TimesheetService.ApprovalStatus[] approvalStatuses, out Timesheet.TimesheetService.CurrentUser currentUser) {
            Timesheet.TimesheetService.GetProjectAccountStatusesDataRequest inValue = new Timesheet.TimesheetService.GetProjectAccountStatusesDataRequest();
            inValue.context = context;
            inValue.minDate = minDate;
            inValue.maxDate = maxDate;
            inValue.scope = scope;
            inValue.id = id;
            inValue.openStatuses = openStatuses;
            Timesheet.TimesheetService.GetProjectAccountStatusesDataResponse retVal = ((Timesheet.TimesheetService.DataService)(this)).GetProjectAccountStatusesData(inValue);
            statuses = retVal.statuses;
            accounts = retVal.accounts;
            approvalStatuses = retVal.approvalStatuses;
            currentUser = retVal.currentUser;
            return retVal.GetProjectAccountStatusesDataResult;
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.GetProjectAccountStatusesDataResponse> GetProjectAccountStatusesDataAsync(Timesheet.TimesheetService.GetProjectAccountStatusesDataRequest request) {
            return base.Channel.GetProjectAccountStatusesDataAsync(request);
        }
        
        public Timesheet.TimesheetService.ProjectAccountStatuses GetProjectAccountStatusData(string context, System.DateTime minDate, System.DateTime maxDate, Timesheet.TimesheetService.ProjectAccount projectAccount) {
            return base.Channel.GetProjectAccountStatusData(context, minDate, maxDate, projectAccount);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.ProjectAccountStatuses> GetProjectAccountStatusDataAsync(string context, System.DateTime minDate, System.DateTime maxDate, Timesheet.TimesheetService.ProjectAccount projectAccount) {
            return base.Channel.GetProjectAccountStatusDataAsync(context, minDate, maxDate, projectAccount);
        }
        
        public void UpdateProjectAccountStatuses(string context, Timesheet.TimesheetService.TimesheetRecord[] records, bool approve, bool changePaymentStatuses) {
            base.Channel.UpdateProjectAccountStatuses(context, records, approve, changePaymentStatuses);
        }
        
        public System.Threading.Tasks.Task UpdateProjectAccountStatusesAsync(string context, Timesheet.TimesheetService.TimesheetRecord[] records, bool approve, bool changePaymentStatuses) {
            return base.Channel.UpdateProjectAccountStatusesAsync(context, records, approve, changePaymentStatuses);
        }
        
        public Timesheet.TimesheetService.ContractTitle InsertContractTitle(string context, Timesheet.TimesheetService.ContractTitle title) {
            return base.Channel.InsertContractTitle(context, title);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.ContractTitle> InsertContractTitleAsync(string context, Timesheet.TimesheetService.ContractTitle title) {
            return base.Channel.InsertContractTitleAsync(context, title);
        }
        
        public void DeleteContractTitle(string context, int titleId) {
            base.Channel.DeleteContractTitle(context, titleId);
        }
        
        public System.Threading.Tasks.Task DeleteContractTitleAsync(string context, int titleId) {
            return base.Channel.DeleteContractTitleAsync(context, titleId);
        }
        
        public Timesheet.TimesheetService.ContractTitle UpdateContractTitle(string context, Timesheet.TimesheetService.ContractTitle title) {
            return base.Channel.UpdateContractTitle(context, title);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.ContractTitle> UpdateContractTitleAsync(string context, Timesheet.TimesheetService.ContractTitle title) {
            return base.Channel.UpdateContractTitleAsync(context, title);
        }
        
        public Timesheet.TimesheetService.ContractTitleItem[] GetContractTitleItemsForTitle(string context, Timesheet.TimesheetService.ContractTitle title) {
            return base.Channel.GetContractTitleItemsForTitle(context, title);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.ContractTitleItem[]> GetContractTitleItemsForTitleAsync(string context, Timesheet.TimesheetService.ContractTitle title) {
            return base.Channel.GetContractTitleItemsForTitleAsync(context, title);
        }
        
        public Timesheet.TimesheetService.ContractTitleItem[] GetContractTitleItems(string context, string month, int personId) {
            return base.Channel.GetContractTitleItems(context, month, personId);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.ContractTitleItem[]> GetContractTitleItemsAsync(string context, string month, int personId) {
            return base.Channel.GetContractTitleItemsAsync(context, month, personId);
        }
        
        public Timesheet.TimesheetService.ContractTitle[] GetContractTitles(string context, string fromDate, string toDate, Timesheet.TimesheetService.Scope scope) {
            return base.Channel.GetContractTitles(context, fromDate, toDate, scope);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.ContractTitle[]> GetContractTitlesAsync(string context, string fromDate, string toDate, Timesheet.TimesheetService.Scope scope) {
            return base.Channel.GetContractTitlesAsync(context, fromDate, toDate, scope);
        }
        
        public Timesheet.TimesheetService.ContractTitleStatus[] GetContractTitleStatuses(string context) {
            return base.Channel.GetContractTitleStatuses(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.ContractTitleStatus[]> GetContractTitleStatusesAsync(string context) {
            return base.Channel.GetContractTitleStatusesAsync(context);
        }
        
        public void UpdateEmployeeInfo(Timesheet.TimesheetService.EmployeeInfo employee) {
            base.Channel.UpdateEmployeeInfo(employee);
        }
        
        public System.Threading.Tasks.Task UpdateEmployeeInfoAsync(Timesheet.TimesheetService.EmployeeInfo employee) {
            return base.Channel.UpdateEmployeeInfoAsync(employee);
        }
        
        public int Alt_GetSubprojectId(string context, int projectId, string subprojectName) {
            return base.Channel.Alt_GetSubprojectId(context, projectId, subprojectName);
        }
        
        public System.Threading.Tasks.Task<int> Alt_GetSubprojectIdAsync(string context, int projectId, string subprojectName) {
            return base.Channel.Alt_GetSubprojectIdAsync(context, projectId, subprojectName);
        }
        
        public Timesheet.TimesheetService.Task[] Alt_GetAvailableTasks(string context, System.Nullable<int> projectId, System.Nullable<int> subprojectId) {
            return base.Channel.Alt_GetAvailableTasks(context, projectId, subprojectId);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Task[]> Alt_GetAvailableTasksAsync(string context, System.Nullable<int> projectId, System.Nullable<int> subprojectId) {
            return base.Channel.Alt_GetAvailableTasksAsync(context, projectId, subprojectId);
        }
        
        public Timesheet.TimesheetService.Subproject[] Alt_GetAvailableSubprojects(string context, System.Nullable<int> projectId) {
            return base.Channel.Alt_GetAvailableSubprojects(context, projectId);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Subproject[]> Alt_GetAvailableSubprojectsAsync(string context, System.Nullable<int> projectId) {
            return base.Channel.Alt_GetAvailableSubprojectsAsync(context, projectId);
        }
        
        public Timesheet.TimesheetService.Location[] GetLocations(string context) {
            return base.Channel.GetLocations(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Location[]> GetLocationsAsync(string context) {
            return base.Channel.GetLocationsAsync(context);
        }
        
        public Timesheet.TimesheetService.Task[] Alt_GetTasks(string context) {
            return base.Channel.Alt_GetTasks(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Task[]> Alt_GetTasksAsync(string context) {
            return base.Channel.Alt_GetTasksAsync(context);
        }
        
        public Timesheet.TimesheetService.Alt_Project[] Alt_GetProjects(string context) {
            return base.Channel.Alt_GetProjects(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_Project[]> Alt_GetProjectsAsync(string context) {
            return base.Channel.Alt_GetProjectsAsync(context);
        }
        
        public Timesheet.TimesheetService.TimesheetRecord Alt_GetTimesheetRecord(string context, int id) {
            return base.Channel.Alt_GetTimesheetRecord(context, id);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord> Alt_GetTimesheetRecordAsync(string context, int id) {
            return base.Channel.Alt_GetTimesheetRecordAsync(context, id);
        }
        
        public Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_DuplicateRecord(string context, Timesheet.TimesheetService.TimesheetRecord newRecord, int count, bool incrementDays, string newSubprojectName, string newTaskName) {
            return base.Channel.Alt_DuplicateRecord(context, newRecord, count, incrementDays, newSubprojectName, newTaskName);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_DuplicateRecordAsync(string context, Timesheet.TimesheetService.TimesheetRecord newRecord, int count, bool incrementDays, string newSubprojectName, string newTaskName) {
            return base.Channel.Alt_DuplicateRecordAsync(context, newRecord, count, incrementDays, newSubprojectName, newTaskName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Timesheet.TimesheetService.Alt_SplitRecordResponse Timesheet.TimesheetService.DataService.Alt_SplitRecord(Timesheet.TimesheetService.Alt_SplitRecordRequest request) {
            return base.Channel.Alt_SplitRecord(request);
        }
        
        public void Alt_SplitRecord(string context, Timesheet.TimesheetService.TimesheetRecord oldRecord, Timesheet.TimesheetService.TimesheetRecord newRecord, string newSubprojectName, string newTaskName, ref Timesheet.TimesheetService.Alt_TimesheetRecord updated, ref Timesheet.TimesheetService.Alt_TimesheetRecord inserted) {
            Timesheet.TimesheetService.Alt_SplitRecordRequest inValue = new Timesheet.TimesheetService.Alt_SplitRecordRequest();
            inValue.context = context;
            inValue.oldRecord = oldRecord;
            inValue.newRecord = newRecord;
            inValue.newSubprojectName = newSubprojectName;
            inValue.newTaskName = newTaskName;
            inValue.updated = updated;
            inValue.inserted = inserted;
            Timesheet.TimesheetService.Alt_SplitRecordResponse retVal = ((Timesheet.TimesheetService.DataService)(this)).Alt_SplitRecord(inValue);
            updated = retVal.updated;
            inserted = retVal.inserted;
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_SplitRecordResponse> Alt_SplitRecordAsync(Timesheet.TimesheetService.Alt_SplitRecordRequest request) {
            return base.Channel.Alt_SplitRecordAsync(request);
        }
        
        public Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_InsertFromClipboard(string context, Timesheet.TimesheetService.Alt_TimesheetRecord[] newRecords, string[] columns) {
            return base.Channel.Alt_InsertFromClipboard(context, newRecords, columns);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_InsertFromClipboardAsync(string context, Timesheet.TimesheetService.Alt_TimesheetRecord[] newRecords, string[] columns) {
            return base.Channel.Alt_InsertFromClipboardAsync(context, newRecords, columns);
        }
        
        public Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_InsertRecords(string context, Timesheet.TimesheetService.TimesheetRecord newRecord, int count, bool incrementDays, string newSubprojectName, string newTaskName) {
            return base.Channel.Alt_InsertRecords(context, newRecord, count, incrementDays, newSubprojectName, newTaskName);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_InsertRecordsAsync(string context, Timesheet.TimesheetService.TimesheetRecord newRecord, int count, bool incrementDays, string newSubprojectName, string newTaskName) {
            return base.Channel.Alt_InsertRecordsAsync(context, newRecord, count, incrementDays, newSubprojectName, newTaskName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Timesheet.TimesheetService.Alt_ChangeSubprojectResponse Timesheet.TimesheetService.DataService.Alt_ChangeSubproject(Timesheet.TimesheetService.Alt_ChangeSubprojectRequest request) {
            return base.Channel.Alt_ChangeSubproject(request);
        }
        
        public int[] Alt_ChangeSubproject(string context, ref int[] ids, Timesheet.TimesheetService.Alt_Project project, ref Timesheet.TimesheetService.Subproject subproject, ref Timesheet.TimesheetService.Task task, ref bool skip, ref bool change, ref Timesheet.TimesheetService.Status status, ref string comment, bool clearSubprojects, bool clearTasks) {
            Timesheet.TimesheetService.Alt_ChangeSubprojectRequest inValue = new Timesheet.TimesheetService.Alt_ChangeSubprojectRequest();
            inValue.context = context;
            inValue.ids = ids;
            inValue.project = project;
            inValue.subproject = subproject;
            inValue.task = task;
            inValue.skip = skip;
            inValue.change = change;
            inValue.status = status;
            inValue.comment = comment;
            inValue.clearSubprojects = clearSubprojects;
            inValue.clearTasks = clearTasks;
            Timesheet.TimesheetService.Alt_ChangeSubprojectResponse retVal = ((Timesheet.TimesheetService.DataService)(this)).Alt_ChangeSubproject(inValue);
            ids = retVal.ids;
            subproject = retVal.subproject;
            task = retVal.task;
            skip = retVal.skip;
            change = retVal.change;
            status = retVal.status;
            comment = retVal.comment;
            return retVal.Alt_ChangeSubprojectResult;
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ChangeSubprojectResponse> Alt_ChangeSubprojectAsync(Timesheet.TimesheetService.Alt_ChangeSubprojectRequest request) {
            return base.Channel.Alt_ChangeSubprojectAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Timesheet.TimesheetService.Alt_ChangeProjectResponse Timesheet.TimesheetService.DataService.Alt_ChangeProject(Timesheet.TimesheetService.Alt_ChangeProjectRequest request) {
            return base.Channel.Alt_ChangeProject(request);
        }
        
        public int[] Alt_ChangeProject(string context, ref int[] ids, ref Timesheet.TimesheetService.Alt_Project project, ref Timesheet.TimesheetService.Subproject subproject, ref Timesheet.TimesheetService.Task task, ref bool skipTasks, ref bool skipSubprojects, ref bool changeTask, ref bool changeSubproject, ref Timesheet.TimesheetService.Status status, ref string comment, bool clearSubproject, bool clearTasks, out System.Collections.Generic.Dictionary<int, string> approvedBy) {
            Timesheet.TimesheetService.Alt_ChangeProjectRequest inValue = new Timesheet.TimesheetService.Alt_ChangeProjectRequest();
            inValue.context = context;
            inValue.ids = ids;
            inValue.project = project;
            inValue.subproject = subproject;
            inValue.task = task;
            inValue.skipTasks = skipTasks;
            inValue.skipSubprojects = skipSubprojects;
            inValue.changeTask = changeTask;
            inValue.changeSubproject = changeSubproject;
            inValue.status = status;
            inValue.comment = comment;
            inValue.clearSubproject = clearSubproject;
            inValue.clearTasks = clearTasks;
            Timesheet.TimesheetService.Alt_ChangeProjectResponse retVal = ((Timesheet.TimesheetService.DataService)(this)).Alt_ChangeProject(inValue);
            ids = retVal.ids;
            project = retVal.project;
            subproject = retVal.subproject;
            task = retVal.task;
            skipTasks = retVal.skipTasks;
            skipSubprojects = retVal.skipSubprojects;
            changeTask = retVal.changeTask;
            changeSubproject = retVal.changeSubproject;
            status = retVal.status;
            comment = retVal.comment;
            approvedBy = retVal.approvedBy;
            return retVal.Alt_ChangeProjectResult;
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ChangeProjectResponse> Alt_ChangeProjectAsync(Timesheet.TimesheetService.Alt_ChangeProjectRequest request) {
            return base.Channel.Alt_ChangeProjectAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Timesheet.TimesheetService.Alt_ChangeTaskResponse Timesheet.TimesheetService.DataService.Alt_ChangeTask(Timesheet.TimesheetService.Alt_ChangeTaskRequest request) {
            return base.Channel.Alt_ChangeTask(request);
        }
        
        public void Alt_ChangeTask(string context, ref int[] ids, Timesheet.TimesheetService.Alt_Project project, int subprojectId, ref Timesheet.TimesheetService.Task task, ref Timesheet.TimesheetService.Status status, ref string comment, bool clearTasks) {
            Timesheet.TimesheetService.Alt_ChangeTaskRequest inValue = new Timesheet.TimesheetService.Alt_ChangeTaskRequest();
            inValue.context = context;
            inValue.ids = ids;
            inValue.project = project;
            inValue.subprojectId = subprojectId;
            inValue.task = task;
            inValue.status = status;
            inValue.comment = comment;
            inValue.clearTasks = clearTasks;
            Timesheet.TimesheetService.Alt_ChangeTaskResponse retVal = ((Timesheet.TimesheetService.DataService)(this)).Alt_ChangeTask(inValue);
            ids = retVal.ids;
            task = retVal.task;
            status = retVal.status;
            comment = retVal.comment;
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ChangeTaskResponse> Alt_ChangeTaskAsync(Timesheet.TimesheetService.Alt_ChangeTaskRequest request) {
            return base.Channel.Alt_ChangeTaskAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Timesheet.TimesheetService.Alt_ChangeStatusResponse Timesheet.TimesheetService.DataService.Alt_ChangeStatus(Timesheet.TimesheetService.Alt_ChangeStatusRequest request) {
            return base.Channel.Alt_ChangeStatus(request);
        }
        
        public Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_ChangeStatus(string context, ref int[] ids, ref Timesheet.TimesheetService.Status status, ref bool isSold, ref string saleMonth, ref string paymentStatus, ref int[] toApprove, ref Timesheet.TimesheetService.Person approvedBy, ref string approvalNote) {
            Timesheet.TimesheetService.Alt_ChangeStatusRequest inValue = new Timesheet.TimesheetService.Alt_ChangeStatusRequest();
            inValue.context = context;
            inValue.ids = ids;
            inValue.status = status;
            inValue.isSold = isSold;
            inValue.saleMonth = saleMonth;
            inValue.paymentStatus = paymentStatus;
            inValue.toApprove = toApprove;
            inValue.approvedBy = approvedBy;
            inValue.approvalNote = approvalNote;
            Timesheet.TimesheetService.Alt_ChangeStatusResponse retVal = ((Timesheet.TimesheetService.DataService)(this)).Alt_ChangeStatus(inValue);
            ids = retVal.ids;
            status = retVal.status;
            isSold = retVal.isSold;
            saleMonth = retVal.saleMonth;
            paymentStatus = retVal.paymentStatus;
            toApprove = retVal.toApprove;
            approvedBy = retVal.approvedBy;
            approvalNote = retVal.approvalNote;
            return retVal.Alt_ChangeStatusResult;
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ChangeStatusResponse> Alt_ChangeStatusAsync(Timesheet.TimesheetService.Alt_ChangeStatusRequest request) {
            return base.Channel.Alt_ChangeStatusAsync(request);
        }
        
        public Timesheet.TimesheetService.Alt_TimesheetRecord Alt_UpdateRecord(string context, Timesheet.TimesheetService.TimesheetRecord record, System.Collections.Generic.Dictionary<string, string> columnsToEdit, string newSubprojectName, string newTaskName) {
            return base.Channel.Alt_UpdateRecord(context, record, columnsToEdit, newSubprojectName, newTaskName);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord> Alt_UpdateRecordAsync(string context, Timesheet.TimesheetService.TimesheetRecord record, System.Collections.Generic.Dictionary<string, string> columnsToEdit, string newSubprojectName, string newTaskName) {
            return base.Channel.Alt_UpdateRecordAsync(context, record, columnsToEdit, newSubprojectName, newTaskName);
        }
        
        public Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_GetTimesheetWithInconsistencies(string context, string id, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate, System.Nullable<int> projectId, System.Nullable<int> personId, string[] columns) {
            return base.Channel.Alt_GetTimesheetWithInconsistencies(context, id, range, nOfRange, fromDate, toDate, projectId, personId, columns);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_GetTimesheetWithInconsistenciesAsync(string context, string id, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate, System.Nullable<int> projectId, System.Nullable<int> personId, string[] columns) {
            return base.Channel.Alt_GetTimesheetWithInconsistenciesAsync(context, id, range, nOfRange, fromDate, toDate, projectId, personId, columns);
        }
        
        public Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_GetTimesheetScopeRange(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range, string[] columns) {
            return base.Channel.Alt_GetTimesheetScopeRange(context, scope, range, columns);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_GetTimesheetScopeRangeAsync(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range, string[] columns) {
            return base.Channel.Alt_GetTimesheetScopeRangeAsync(context, scope, range, columns);
        }
        
        public Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_GetTimesheetScopeIdRangeN(string context, Timesheet.TimesheetService.Scope scope, int id, Timesheet.TimesheetService.Range range, int n, string[] columns) {
            return base.Channel.Alt_GetTimesheetScopeIdRangeN(context, scope, id, range, n, columns);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_GetTimesheetScopeIdRangeNAsync(string context, Timesheet.TimesheetService.Scope scope, int id, Timesheet.TimesheetService.Range range, int n, string[] columns) {
            return base.Channel.Alt_GetTimesheetScopeIdRangeNAsync(context, scope, id, range, n, columns);
        }
        
        public Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_GetTimesheetScopeIdRange(string context, Timesheet.TimesheetService.Scope scope, int id, Timesheet.TimesheetService.Range range, string[] columns) {
            return base.Channel.Alt_GetTimesheetScopeIdRange(context, scope, id, range, columns);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_GetTimesheetScopeIdRangeAsync(string context, Timesheet.TimesheetService.Scope scope, int id, Timesheet.TimesheetService.Range range, string[] columns) {
            return base.Channel.Alt_GetTimesheetScopeIdRangeAsync(context, scope, id, range, columns);
        }
        
        public Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_GetTimesheetScopeRangeN(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range, int n, string[] columns) {
            return base.Channel.Alt_GetTimesheetScopeRangeN(context, scope, range, n, columns);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_GetTimesheetScopeRangeNAsync(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range, int n, string[] columns) {
            return base.Channel.Alt_GetTimesheetScopeRangeNAsync(context, scope, range, n, columns);
        }
        
        public Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_GetTimesheetScopeCustomRange(string context, Timesheet.TimesheetService.Scope scope, System.DateTime fromDate, System.DateTime toDate, string[] columns) {
            return base.Channel.Alt_GetTimesheetScopeCustomRange(context, scope, fromDate, toDate, columns);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_GetTimesheetScopeCustomRangeAsync(string context, Timesheet.TimesheetService.Scope scope, System.DateTime fromDate, System.DateTime toDate, string[] columns) {
            return base.Channel.Alt_GetTimesheetScopeCustomRangeAsync(context, scope, fromDate, toDate, columns);
        }
        
        public Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_GetTimesheetScopeIdCustomRange(string context, Timesheet.TimesheetService.Scope scope, int id, System.DateTime fromDate, System.DateTime toDate, string[] columns) {
            return base.Channel.Alt_GetTimesheetScopeIdCustomRange(context, scope, id, fromDate, toDate, columns);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_GetTimesheetScopeIdCustomRangeAsync(string context, Timesheet.TimesheetService.Scope scope, int id, System.DateTime fromDate, System.DateTime toDate, string[] columns) {
            return base.Channel.Alt_GetTimesheetScopeIdCustomRangeAsync(context, scope, id, fromDate, toDate, columns);
        }
        
        public Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_GetTimesheetWithErrors(string context, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate, string[] columns) {
            return base.Channel.Alt_GetTimesheetWithErrors(context, range, nOfRange, fromDate, toDate, columns);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_GetTimesheetWithErrorsAsync(string context, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate, string[] columns) {
            return base.Channel.Alt_GetTimesheetWithErrorsAsync(context, range, nOfRange, fromDate, toDate, columns);
        }
        
        public Timesheet.TimesheetService.Alt_TimesheetRecord[] Alt_GetTimesheetToCorrect(string context, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate, string[] columns) {
            return base.Channel.Alt_GetTimesheetToCorrect(context, range, nOfRange, fromDate, toDate, columns);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_TimesheetRecord[]> Alt_GetTimesheetToCorrectAsync(string context, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate, string[] columns) {
            return base.Channel.Alt_GetTimesheetToCorrectAsync(context, range, nOfRange, fromDate, toDate, columns);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Timesheet.TimesheetService.Alt_DeleteRecordsResponse Timesheet.TimesheetService.DataService.Alt_DeleteRecords(Timesheet.TimesheetService.Alt_DeleteRecordsRequest request) {
            return base.Channel.Alt_DeleteRecords(request);
        }
        
        public void Alt_DeleteRecords(string context, ref int[] ids) {
            Timesheet.TimesheetService.Alt_DeleteRecordsRequest inValue = new Timesheet.TimesheetService.Alt_DeleteRecordsRequest();
            inValue.context = context;
            inValue.ids = ids;
            Timesheet.TimesheetService.Alt_DeleteRecordsResponse retVal = ((Timesheet.TimesheetService.DataService)(this)).Alt_DeleteRecords(inValue);
            ids = retVal.ids;
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_DeleteRecordsResponse> Alt_DeleteRecordsAsync(Timesheet.TimesheetService.Alt_DeleteRecordsRequest request) {
            return base.Channel.Alt_DeleteRecordsAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Timesheet.TimesheetService.Alt_ChangeLocationResponse Timesheet.TimesheetService.DataService.Alt_ChangeLocation(Timesheet.TimesheetService.Alt_ChangeLocationRequest request) {
            return base.Channel.Alt_ChangeLocation(request);
        }
        
        public void Alt_ChangeLocation(string context, ref int[] ids, ref Timesheet.TimesheetService.Location location) {
            Timesheet.TimesheetService.Alt_ChangeLocationRequest inValue = new Timesheet.TimesheetService.Alt_ChangeLocationRequest();
            inValue.context = context;
            inValue.ids = ids;
            inValue.location = location;
            Timesheet.TimesheetService.Alt_ChangeLocationResponse retVal = ((Timesheet.TimesheetService.DataService)(this)).Alt_ChangeLocation(inValue);
            ids = retVal.ids;
            location = retVal.location;
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ChangeLocationResponse> Alt_ChangeLocationAsync(Timesheet.TimesheetService.Alt_ChangeLocationRequest request) {
            return base.Channel.Alt_ChangeLocationAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Timesheet.TimesheetService.Alt_ChangeCreativeStatusResponse Timesheet.TimesheetService.DataService.Alt_ChangeCreativeStatus(Timesheet.TimesheetService.Alt_ChangeCreativeStatusRequest request) {
            return base.Channel.Alt_ChangeCreativeStatus(request);
        }
        
        public void Alt_ChangeCreativeStatus(string context, ref int[] ids, ref Timesheet.TimesheetService.CreativeStatus status) {
            Timesheet.TimesheetService.Alt_ChangeCreativeStatusRequest inValue = new Timesheet.TimesheetService.Alt_ChangeCreativeStatusRequest();
            inValue.context = context;
            inValue.ids = ids;
            inValue.status = status;
            Timesheet.TimesheetService.Alt_ChangeCreativeStatusResponse retVal = ((Timesheet.TimesheetService.DataService)(this)).Alt_ChangeCreativeStatus(inValue);
            ids = retVal.ids;
            status = retVal.status;
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ChangeCreativeStatusResponse> Alt_ChangeCreativeStatusAsync(Timesheet.TimesheetService.Alt_ChangeCreativeStatusRequest request) {
            return base.Channel.Alt_ChangeCreativeStatusAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Timesheet.TimesheetService.Alt_ChangeCommentResponse Timesheet.TimesheetService.DataService.Alt_ChangeComment(Timesheet.TimesheetService.Alt_ChangeCommentRequest request) {
            return base.Channel.Alt_ChangeComment(request);
        }
        
        public void Alt_ChangeComment(string context, ref int[] ids, ref string comment) {
            Timesheet.TimesheetService.Alt_ChangeCommentRequest inValue = new Timesheet.TimesheetService.Alt_ChangeCommentRequest();
            inValue.context = context;
            inValue.ids = ids;
            inValue.comment = comment;
            Timesheet.TimesheetService.Alt_ChangeCommentResponse retVal = ((Timesheet.TimesheetService.DataService)(this)).Alt_ChangeComment(inValue);
            ids = retVal.ids;
            comment = retVal.comment;
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ChangeCommentResponse> Alt_ChangeCommentAsync(Timesheet.TimesheetService.Alt_ChangeCommentRequest request) {
            return base.Channel.Alt_ChangeCommentAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Timesheet.TimesheetService.Alt_ChangePaymentStatusResponse Timesheet.TimesheetService.DataService.Alt_ChangePaymentStatus(Timesheet.TimesheetService.Alt_ChangePaymentStatusRequest request) {
            return base.Channel.Alt_ChangePaymentStatus(request);
        }
        
        public void Alt_ChangePaymentStatus(string context, ref int[] ids, ref string paymentStatus) {
            Timesheet.TimesheetService.Alt_ChangePaymentStatusRequest inValue = new Timesheet.TimesheetService.Alt_ChangePaymentStatusRequest();
            inValue.context = context;
            inValue.ids = ids;
            inValue.paymentStatus = paymentStatus;
            Timesheet.TimesheetService.Alt_ChangePaymentStatusResponse retVal = ((Timesheet.TimesheetService.DataService)(this)).Alt_ChangePaymentStatus(inValue);
            ids = retVal.ids;
            paymentStatus = retVal.paymentStatus;
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ChangePaymentStatusResponse> Alt_ChangePaymentStatusAsync(Timesheet.TimesheetService.Alt_ChangePaymentStatusRequest request) {
            return base.Channel.Alt_ChangePaymentStatusAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Timesheet.TimesheetService.Alt_RedirectResponse Timesheet.TimesheetService.DataService.Alt_Redirect(Timesheet.TimesheetService.Alt_RedirectRequest request) {
            return base.Channel.Alt_Redirect(request);
        }
        
        public void Alt_Redirect(string context, ref int[] ids, ref Timesheet.TimesheetService.Person person, ref string approvalNote) {
            Timesheet.TimesheetService.Alt_RedirectRequest inValue = new Timesheet.TimesheetService.Alt_RedirectRequest();
            inValue.context = context;
            inValue.ids = ids;
            inValue.person = person;
            inValue.approvalNote = approvalNote;
            Timesheet.TimesheetService.Alt_RedirectResponse retVal = ((Timesheet.TimesheetService.DataService)(this)).Alt_Redirect(inValue);
            ids = retVal.ids;
            person = retVal.person;
            approvalNote = retVal.approvalNote;
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_RedirectResponse> Alt_RedirectAsync(Timesheet.TimesheetService.Alt_RedirectRequest request) {
            return base.Channel.Alt_RedirectAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Timesheet.TimesheetService.Alt_ResendForApprovalResponse Timesheet.TimesheetService.DataService.Alt_ResendForApproval(Timesheet.TimesheetService.Alt_ResendForApprovalRequest request) {
            return base.Channel.Alt_ResendForApproval(request);
        }
        
        public void Alt_ResendForApproval(string context, ref int[] ids, ref string approvalNote) {
            Timesheet.TimesheetService.Alt_ResendForApprovalRequest inValue = new Timesheet.TimesheetService.Alt_ResendForApprovalRequest();
            inValue.context = context;
            inValue.ids = ids;
            inValue.approvalNote = approvalNote;
            Timesheet.TimesheetService.Alt_ResendForApprovalResponse retVal = ((Timesheet.TimesheetService.DataService)(this)).Alt_ResendForApproval(inValue);
            ids = retVal.ids;
            approvalNote = retVal.approvalNote;
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ResendForApprovalResponse> Alt_ResendForApprovalAsync(Timesheet.TimesheetService.Alt_ResendForApprovalRequest request) {
            return base.Channel.Alt_ResendForApprovalAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Timesheet.TimesheetService.Alt_ResendToEmployeeResponse Timesheet.TimesheetService.DataService.Alt_ResendToEmployee(Timesheet.TimesheetService.Alt_ResendToEmployeeRequest request) {
            return base.Channel.Alt_ResendToEmployee(request);
        }
        
        public void Alt_ResendToEmployee(string context, ref int[] ids, ref string approvalNote, ref Timesheet.TimesheetService.Person approvedBy) {
            Timesheet.TimesheetService.Alt_ResendToEmployeeRequest inValue = new Timesheet.TimesheetService.Alt_ResendToEmployeeRequest();
            inValue.context = context;
            inValue.ids = ids;
            inValue.approvalNote = approvalNote;
            inValue.approvedBy = approvedBy;
            Timesheet.TimesheetService.Alt_ResendToEmployeeResponse retVal = ((Timesheet.TimesheetService.DataService)(this)).Alt_ResendToEmployee(inValue);
            ids = retVal.ids;
            approvalNote = retVal.approvalNote;
            approvedBy = retVal.approvedBy;
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ResendToEmployeeResponse> Alt_ResendToEmployeeAsync(Timesheet.TimesheetService.Alt_ResendToEmployeeRequest request) {
            return base.Channel.Alt_ResendToEmployeeAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Timesheet.TimesheetService.Alt_ApproveResponse Timesheet.TimesheetService.DataService.Alt_Approve(Timesheet.TimesheetService.Alt_ApproveRequest request) {
            return base.Channel.Alt_Approve(request);
        }
        
        public void Alt_Approve(string context, ref Timesheet.TimesheetService.ApprovalStatus status, ref string approvalNote, ref int[] ids, ref Timesheet.TimesheetService.Person approvedBy) {
            Timesheet.TimesheetService.Alt_ApproveRequest inValue = new Timesheet.TimesheetService.Alt_ApproveRequest();
            inValue.context = context;
            inValue.status = status;
            inValue.approvalNote = approvalNote;
            inValue.ids = ids;
            inValue.approvedBy = approvedBy;
            Timesheet.TimesheetService.Alt_ApproveResponse retVal = ((Timesheet.TimesheetService.DataService)(this)).Alt_Approve(inValue);
            status = retVal.status;
            approvalNote = retVal.approvalNote;
            ids = retVal.ids;
            approvedBy = retVal.approvedBy;
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Alt_ApproveResponse> Alt_ApproveAsync(Timesheet.TimesheetService.Alt_ApproveRequest request) {
            return base.Channel.Alt_ApproveAsync(request);
        }
        
        public Timesheet.TimesheetService.CurrentUser GetCurrentUser(string context) {
            return base.Channel.GetCurrentUser(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.CurrentUser> GetCurrentUserAsync(string context) {
            return base.Channel.GetCurrentUserAsync(context);
        }
        
        public string[] GetAvailableContexts() {
            return base.Channel.GetAvailableContexts();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAvailableContextsAsync() {
            return base.Channel.GetAvailableContextsAsync();
        }
        
        public Timesheet.TimesheetService.Project[] GetRecentProjects(string context) {
            return base.Channel.GetRecentProjects(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Project[]> GetRecentProjectsAsync(string context) {
            return base.Channel.GetRecentProjectsAsync(context);
        }
        
        public Timesheet.TimesheetService.Location[] GetRecentLocations(string context) {
            return base.Channel.GetRecentLocations(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Location[]> GetRecentLocationsAsync(string context) {
            return base.Channel.GetRecentLocationsAsync(context);
        }
        
        public Timesheet.TimesheetService.Subproject[] GetRecentSubprojects(string context, int projectId) {
            return base.Channel.GetRecentSubprojects(context, projectId);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Subproject[]> GetRecentSubprojectsAsync(string context, int projectId) {
            return base.Channel.GetRecentSubprojectsAsync(context, projectId);
        }
        
        public Timesheet.TimesheetService.Task[] GetRecentTasks(string context, int projectId, int subprojectId) {
            return base.Channel.GetRecentTasks(context, projectId, subprojectId);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Task[]> GetRecentTasksAsync(string context, int projectId, int subprojectId) {
            return base.Channel.GetRecentTasksAsync(context, projectId, subprojectId);
        }
        
        public string[] GetRecentComments(string context, int projectId, int subprojectId, int taskId) {
            return base.Channel.GetRecentComments(context, projectId, subprojectId, taskId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetRecentCommentsAsync(string context, int projectId, int subprojectId, int taskId) {
            return base.Channel.GetRecentCommentsAsync(context, projectId, subprojectId, taskId);
        }
        
        public Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetScopeRange(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range) {
            return base.Channel.GetTimesheetScopeRange(context, scope, range);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetScopeRangeAsync(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range) {
            return base.Channel.GetTimesheetScopeRangeAsync(context, scope, range);
        }
        
        public Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetTest(string context) {
            return base.Channel.GetTimesheetTest(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetTestAsync(string context) {
            return base.Channel.GetTimesheetTestAsync(context);
        }
        
        public Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetScopeIdRangeN(string context, Timesheet.TimesheetService.Scope scope, int id, Timesheet.TimesheetService.Range range, int n) {
            return base.Channel.GetTimesheetScopeIdRangeN(context, scope, id, range, n);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetScopeIdRangeNAsync(string context, Timesheet.TimesheetService.Scope scope, int id, Timesheet.TimesheetService.Range range, int n) {
            return base.Channel.GetTimesheetScopeIdRangeNAsync(context, scope, id, range, n);
        }
        
        public Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetScopeIdRange(string context, Timesheet.TimesheetService.Scope scope, int id, Timesheet.TimesheetService.Range range) {
            return base.Channel.GetTimesheetScopeIdRange(context, scope, id, range);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetScopeIdRangeAsync(string context, Timesheet.TimesheetService.Scope scope, int id, Timesheet.TimesheetService.Range range) {
            return base.Channel.GetTimesheetScopeIdRangeAsync(context, scope, id, range);
        }
        
        public Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetScopeRangeN(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range, int n) {
            return base.Channel.GetTimesheetScopeRangeN(context, scope, range, n);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetScopeRangeNAsync(string context, Timesheet.TimesheetService.Scope scope, Timesheet.TimesheetService.Range range, int n) {
            return base.Channel.GetTimesheetScopeRangeNAsync(context, scope, range, n);
        }
        
        public Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetScopeCustomRange(string context, Timesheet.TimesheetService.Scope scope, System.DateTime fromDate, System.DateTime toDate) {
            return base.Channel.GetTimesheetScopeCustomRange(context, scope, fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetScopeCustomRangeAsync(string context, Timesheet.TimesheetService.Scope scope, System.DateTime fromDate, System.DateTime toDate) {
            return base.Channel.GetTimesheetScopeCustomRangeAsync(context, scope, fromDate, toDate);
        }
        
        public Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetScopeIdCustomRange(string context, Timesheet.TimesheetService.Scope scope, int id, System.DateTime fromDate, System.DateTime toDate) {
            return base.Channel.GetTimesheetScopeIdCustomRange(context, scope, id, fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetScopeIdCustomRangeAsync(string context, Timesheet.TimesheetService.Scope scope, int id, System.DateTime fromDate, System.DateTime toDate) {
            return base.Channel.GetTimesheetScopeIdCustomRangeAsync(context, scope, id, fromDate, toDate);
        }
        
        public Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetWithErrors(string context, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate) {
            return base.Channel.GetTimesheetWithErrors(context, range, nOfRange, fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetWithErrorsAsync(string context, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate) {
            return base.Channel.GetTimesheetWithErrorsAsync(context, range, nOfRange, fromDate, toDate);
        }
        
        public Timesheet.TimesheetService.TimesheetRecord[] GetTimesheetToCorrect(string context, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate) {
            return base.Channel.GetTimesheetToCorrect(context, range, nOfRange, fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetTimesheetToCorrectAsync(string context, Timesheet.TimesheetService.Range range, System.Nullable<int> nOfRange, System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate) {
            return base.Channel.GetTimesheetToCorrectAsync(context, range, nOfRange, fromDate, toDate);
        }
        
        public int GetPendingItemsCount(string context) {
            return base.Channel.GetPendingItemsCount(context);
        }
        
        public System.Threading.Tasks.Task<int> GetPendingItemsCountAsync(string context) {
            return base.Channel.GetPendingItemsCountAsync(context);
        }
        
        public int GetForMyApprovalCount(string context, Timesheet.TimesheetService.Range range) {
            return base.Channel.GetForMyApprovalCount(context, range);
        }
        
        public System.Threading.Tasks.Task<int> GetForMyApprovalCountAsync(string context, Timesheet.TimesheetService.Range range) {
            return base.Channel.GetForMyApprovalCountAsync(context, range);
        }
        
        public Timesheet.TimesheetService.CreativeStatus[] GetCreativeStatuses(string context) {
            return base.Channel.GetCreativeStatuses(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.CreativeStatus[]> GetCreativeStatusesAsync(string context) {
            return base.Channel.GetCreativeStatusesAsync(context);
        }
        
        public Timesheet.TimesheetService.Project[] GetProjects(string context) {
            return base.Channel.GetProjects(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Project[]> GetProjectsAsync(string context) {
            return base.Channel.GetProjectsAsync(context);
        }
        
        public Timesheet.TimesheetService.ProjectInfo[] GetProjectsInfo(string context) {
            return base.Channel.GetProjectsInfo(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.ProjectInfo[]> GetProjectsInfoAsync(string context) {
            return base.Channel.GetProjectsInfoAsync(context);
        }
        
        public Timesheet.TimesheetService.Person[] GetPersons(string context) {
            return base.Channel.GetPersons(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetPersonsAsync(string context) {
            return base.Channel.GetPersonsAsync(context);
        }
        
        public Timesheet.TimesheetService.Person[] GetTimesheetPersons(string context) {
            return base.Channel.GetTimesheetPersons(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetTimesheetPersonsAsync(string context) {
            return base.Channel.GetTimesheetPersonsAsync(context);
        }
        
        public Timesheet.TimesheetService.Person[] GetAllTimesheeters(string context) {
            return base.Channel.GetAllTimesheeters(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetAllTimesheetersAsync(string context) {
            return base.Channel.GetAllTimesheetersAsync(context);
        }
        
        public Timesheet.TimesheetService.Subproject[] GetAvailableSubprojects(string context, System.Nullable<int> projectId) {
            return base.Channel.GetAvailableSubprojects(context, projectId);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Subproject[]> GetAvailableSubprojectsAsync(string context, System.Nullable<int> projectId) {
            return base.Channel.GetAvailableSubprojectsAsync(context, projectId);
        }
        
        public Timesheet.TimesheetService.ApprovalStatus[] GetApprovalStatuses(string context) {
            return base.Channel.GetApprovalStatuses(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.ApprovalStatus[]> GetApprovalStatusesAsync(string context) {
            return base.Channel.GetApprovalStatusesAsync(context);
        }
        
        public Timesheet.TimesheetService.DeletableLocation[] GetLocationsWithCanBeDeleted(string context) {
            return base.Channel.GetLocationsWithCanBeDeleted(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.DeletableLocation[]> GetLocationsWithCanBeDeletedAsync(string context) {
            return base.Channel.GetLocationsWithCanBeDeletedAsync(context);
        }
        
        public Timesheet.TimesheetService.Status[] GetStatuses(string context) {
            return base.Channel.GetStatuses(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Status[]> GetStatusesAsync(string context) {
            return base.Channel.GetStatusesAsync(context);
        }
        
        public Timesheet.TimesheetService.IsSoldStatus[] GetIsSoldStatuses(string context) {
            return base.Channel.GetIsSoldStatuses(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.IsSoldStatus[]> GetIsSoldStatusesAsync(string context) {
            return base.Channel.GetIsSoldStatusesAsync(context);
        }
        
        public Timesheet.TimesheetService.TimesheetRecord[] Approve(string context, Timesheet.TimesheetService.TimesheetRecord[] records) {
            return base.Channel.Approve(context, records);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> ApproveAsync(string context, Timesheet.TimesheetService.TimesheetRecord[] records) {
            return base.Channel.ApproveAsync(context, records);
        }
        
        public Timesheet.TimesheetService.TimesheetRecord[] Paste(string context, Timesheet.TimesheetService.TimesheetRecord[] list) {
            return base.Channel.Paste(context, list);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> PasteAsync(string context, Timesheet.TimesheetService.TimesheetRecord[] list) {
            return base.Channel.PasteAsync(context, list);
        }
        
        public Timesheet.TimesheetService.TimesheetRecord[] UpdateRows(string context, Timesheet.TimesheetService.TimesheetRecord[] list, bool editStatus, bool approve) {
            return base.Channel.UpdateRows(context, list, editStatus, approve);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> UpdateRowsAsync(string context, Timesheet.TimesheetService.TimesheetRecord[] list, bool editStatus, bool approve) {
            return base.Channel.UpdateRowsAsync(context, list, editStatus, approve);
        }
        
        public Timesheet.TimesheetService.TimesheetRecord UpdateRow(string context, Timesheet.TimesheetService.TimesheetRecord item, bool editStatus) {
            return base.Channel.UpdateRow(context, item, editStatus);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord> UpdateRowAsync(string context, Timesheet.TimesheetService.TimesheetRecord item, bool editStatus) {
            return base.Channel.UpdateRowAsync(context, item, editStatus);
        }
        
        public Timesheet.TimesheetService.TimesheetRecord GetRow(string context, int id) {
            return base.Channel.GetRow(context, id);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord> GetRowAsync(string context, int id) {
            return base.Channel.GetRowAsync(context, id);
        }
        
        public Timesheet.TimesheetService.TimesheetRecord[] GetRows(string context, int[] ids) {
            return base.Channel.GetRows(context, ids);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> GetRowsAsync(string context, int[] ids) {
            return base.Channel.GetRowsAsync(context, ids);
        }
        
        public Timesheet.TimesheetService.HistoryRecord[] GetHistory(string context, int timesheetId) {
            return base.Channel.GetHistory(context, timesheetId);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.HistoryRecord[]> GetHistoryAsync(string context, int timesheetId) {
            return base.Channel.GetHistoryAsync(context, timesheetId);
        }
        
        public Timesheet.TimesheetService.ProjectHistoryRecord[] GetProjectHistory(string context, int projectId) {
            return base.Channel.GetProjectHistory(context, projectId);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.ProjectHistoryRecord[]> GetProjectHistoryAsync(string context, int projectId) {
            return base.Channel.GetProjectHistoryAsync(context, projectId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Timesheet.TimesheetService.SplitRowsResponse Timesheet.TimesheetService.DataService.SplitRows(Timesheet.TimesheetService.SplitRowsRequest request) {
            return base.Channel.SplitRows(request);
        }
        
        public void SplitRows(string context, ref Timesheet.TimesheetService.TimesheetRecord oldRecord, ref Timesheet.TimesheetService.TimesheetRecord newRecord) {
            Timesheet.TimesheetService.SplitRowsRequest inValue = new Timesheet.TimesheetService.SplitRowsRequest();
            inValue.context = context;
            inValue.oldRecord = oldRecord;
            inValue.newRecord = newRecord;
            Timesheet.TimesheetService.SplitRowsResponse retVal = ((Timesheet.TimesheetService.DataService)(this)).SplitRows(inValue);
            oldRecord = retVal.oldRecord;
            newRecord = retVal.newRecord;
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.SplitRowsResponse> SplitRowsAsync(Timesheet.TimesheetService.SplitRowsRequest request) {
            return base.Channel.SplitRowsAsync(request);
        }
        
        public Timesheet.TimesheetService.TimesheetRecord[] InsertRows(string context, Timesheet.TimesheetService.TimesheetRecord newRecord, int count, bool incrementDays) {
            return base.Channel.InsertRows(context, newRecord, count, incrementDays);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.TimesheetRecord[]> InsertRowsAsync(string context, Timesheet.TimesheetService.TimesheetRecord newRecord, int count, bool incrementDays) {
            return base.Channel.InsertRowsAsync(context, newRecord, count, incrementDays);
        }
        
        public void DeleteRows(string context, Timesheet.TimesheetService.TimesheetRecord[] toDelete) {
            base.Channel.DeleteRows(context, toDelete);
        }
        
        public System.Threading.Tasks.Task DeleteRowsAsync(string context, Timesheet.TimesheetService.TimesheetRecord[] toDelete) {
            return base.Channel.DeleteRowsAsync(context, toDelete);
        }
        
        public Timesheet.TimesheetService.Task[] GetAvailableTasks(string context, System.Nullable<int> projectId, int subprojectId) {
            return base.Channel.GetAvailableTasks(context, projectId, subprojectId);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Task[]> GetAvailableTasksAsync(string context, System.Nullable<int> projectId, int subprojectId) {
            return base.Channel.GetAvailableTasksAsync(context, projectId, subprojectId);
        }
        
        public void RemoveTasksAssignment(string context, int[] projectIds, int[] subprojectIds, int[] taskIds) {
            base.Channel.RemoveTasksAssignment(context, projectIds, subprojectIds, taskIds);
        }
        
        public System.Threading.Tasks.Task RemoveTasksAssignmentAsync(string context, int[] projectIds, int[] subprojectIds, int[] taskIds) {
            return base.Channel.RemoveTasksAssignmentAsync(context, projectIds, subprojectIds, taskIds);
        }
        
        public void RemoveSubprojectsAssignment(string context, int[] projectIds, int[] subprojectIds) {
            base.Channel.RemoveSubprojectsAssignment(context, projectIds, subprojectIds);
        }
        
        public System.Threading.Tasks.Task RemoveSubprojectsAssignmentAsync(string context, int[] projectIds, int[] subprojectIds) {
            return base.Channel.RemoveSubprojectsAssignmentAsync(context, projectIds, subprojectIds);
        }
        
        public void RemoveSubprojects(string context, int[] projectIds, int[] subprojectIds) {
            base.Channel.RemoveSubprojects(context, projectIds, subprojectIds);
        }
        
        public System.Threading.Tasks.Task RemoveSubprojectsAsync(string context, int[] projectIds, int[] subprojectIds) {
            return base.Channel.RemoveSubprojectsAsync(context, projectIds, subprojectIds);
        }
        
        public Timesheet.TimesheetService.Person[] GetGlobalManagers(string context) {
            return base.Channel.GetGlobalManagers(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetGlobalManagersAsync(string context) {
            return base.Channel.GetGlobalManagersAsync(context);
        }
        
        public Timesheet.TimesheetService.Person[] GetAllButGlobalManagers(string context) {
            return base.Channel.GetAllButGlobalManagers(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.Person[]> GetAllButGlobalManagersAsync(string context) {
            return base.Channel.GetAllButGlobalManagersAsync(context);
        }
        
        public void RemoveGlobalManager(string context, int personId) {
            base.Channel.RemoveGlobalManager(context, personId);
        }
        
        public System.Threading.Tasks.Task RemoveGlobalManagerAsync(string context, int personId) {
            return base.Channel.RemoveGlobalManagerAsync(context, personId);
        }
        
        public void RemoveProjectAccountObserver(string context, int personId, int projectAccountId) {
            base.Channel.RemoveProjectAccountObserver(context, personId, projectAccountId);
        }
        
        public System.Threading.Tasks.Task RemoveProjectAccountObserverAsync(string context, int personId, int projectAccountId) {
            return base.Channel.RemoveProjectAccountObserverAsync(context, personId, projectAccountId);
        }
        
        public void AddProjectAccountObservator(string context, int personId, int projectAccountId) {
            base.Channel.AddProjectAccountObservator(context, personId, projectAccountId);
        }
        
        public System.Threading.Tasks.Task AddProjectAccountObservatorAsync(string context, int personId, int projectAccountId) {
            return base.Channel.AddProjectAccountObservatorAsync(context, personId, projectAccountId);
        }
        
        public void AddGlobalManager(string context, int personId) {
            base.Channel.AddGlobalManager(context, personId);
        }
        
        public System.Threading.Tasks.Task AddGlobalManagerAsync(string context, int personId) {
            return base.Channel.AddGlobalManagerAsync(context, personId);
        }
        
        public Timesheet.TimesheetService.ProjectStatus[] GetProjectStatuses(string context) {
            return base.Channel.GetProjectStatuses(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.ProjectStatus[]> GetProjectStatusesAsync(string context) {
            return base.Channel.GetProjectStatusesAsync(context);
        }
        
        public Timesheet.TimesheetService.ProjectAccount[] GetProjectAccounts(string context) {
            return base.Channel.GetProjectAccounts(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.ProjectAccount[]> GetProjectAccountsAsync(string context) {
            return base.Channel.GetProjectAccountsAsync(context);
        }
        
        public Timesheet.TimesheetService.ProjectAccountInfo[] GetProjectAccountsInfo(string context) {
            return base.Channel.GetProjectAccountsInfo(context);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.ProjectAccountInfo[]> GetProjectAccountsInfoAsync(string context) {
            return base.Channel.GetProjectAccountsInfoAsync(context);
        }
        
        public Timesheet.TimesheetService.ProjectAccount GetProjectAccount(string context, int projectAccountId) {
            return base.Channel.GetProjectAccount(context, projectAccountId);
        }
        
        public System.Threading.Tasks.Task<Timesheet.TimesheetService.ProjectAccount> GetProjectAccountAsync(string context, int projectAccountId) {
            return base.Channel.GetProjectAccountAsync(context, projectAccountId);
        }
        
        public bool DeleteProject(string context, int projectId) {
            return base.Channel.DeleteProject(context, projectId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteProjectAsync(string context, int projectId) {
            return base.Channel.DeleteProjectAsync(context, projectId);
        }
        
        public decimal[] GetActualHours(string context, Timesheet.TimesheetService.ProjectTreeNode[] tree, System.Nullable<System.DateTime> referenceDate) {
            return base.Channel.GetActualHours(context, tree, referenceDate);
        }
        
        public System.Threading.Tasks.Task<decimal[]> GetActualHoursAsync(string context, Timesheet.TimesheetService.ProjectTreeNode[] tree, System.Nullable<System.DateTime> referenceDate) {
            return base.Channel.GetActualHoursAsync(context, tree, referenceDate);
        }
    }
}
